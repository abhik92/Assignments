\documentclass[addpoints,12pt]{exam}
\printanswers
\usepackage{amsmath,amssymb,complexity,amsthm}
\usepackage{graphicx}

\newtheorem{theorem}{Theorem}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{observation}[theorem]{Observation}
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{claim}[theorem]{Claim}
\newtheorem{definition}[theorem]{Definition}
\newcommand{\SD}{{\sf SD}}
\newcommand{\N}{{\mathbb{N}}}

\begin{document}
\hrule
\vspace{3mm}
\noindent
{\sf IITM-CS6014 : Advanced Theory of Computation  \hfill Author: Karthik Abinav}
\vspace{3mm}\\
\noindent
{\sf Problem Set \#4}
\vspace{3mm}
\hrule
{\small
\begin{itemize}
\item Rules of the game remain the same. Submissions must be single file in \LaTeX~format at the upload link set up in cse moodle page of the course. 
\end{itemize}}
\hrule

\begin{questions}
\question[15]
Argue whether the following functions qualify to be called as a
\emph{resource} according to Blum's resource axioms.
\begin{parts}
\part[3]$ {\sf VALUE}(M,x) = \begin{cases} 
			 0 & \text{ if $M$ rejects $x$}, \\
			 1 & \text{ if $M$ accepts $x$}, \\
			 \text{undefined} & \text{ if $M$ does not halts on
			 $x$}
		 	\end{cases}
$
\newline 
\textbf{Answer} \newline
The above resource function satisfies Blums first axiom i.e. it is defined only when $M$ halts on $x$. However, given a $M$,$x$,$k$ , it is not decidable
to check if VALUE(M,x) = k. Hence it is not a resource.

Consider $R= \{(M,x,k):VALUE(M,x)=k\}$

Suppose $R$ was decidable via a total TM $N$, then $MP$ can be decided by giving $(M,x,1)$ as input to $N$. But, $MP$ is not decidable and hence $R$ is not decidable.


\part[5] A \emph{turn} of tape head is defined as movement of tape head from
$L \to R$ or $R \to L$. 

$ {\sf TURN}(M,x) = \begin{cases}
			 \text{No. of turns that tape head makes when $M$ runs
			 on $x$} & \text{ if $M$ halts on $x$} \\
			 \text{undefined} & \text{ otherwise}
			\end{cases}
$
\newline 
\textbf{Answer} \newline
The above resource function satisfies Blums first axiom i.e. it is defined only when $M$ halts on $x$. 
The above resource also satisfies Blum's second axiom, i.e.
$R=\{(M,x,k):TURN(M,x)=k\}$ is a decidable set. \newline

Consider a total TM $N$ corresponding to $R$. Let the description of this machine be as follows: \newline
\begin{itemize}
 \item Run $M$ on $x$.
 \item If the machine makes more than $k$ turns, reject and halt.
 \item Else, machine $M$ will halt on $x$ and hence if the number of turns made by the machine is $k$, accept. Else , reject.
\end{itemize}

\textbf{Claim} \newline
Language accepted by a machine which makes finite number of turns is regular. \newline

This is because, the crossing sequence at every index for this machine will be bounded by a fixed constant $s$ , and from class we saw such machines
accept only regular languages. \newline

From the claim above, the machine $N$ will always halt and hence is total.


\part[5] $ {\sf COUNT}(M,x) = \begin{cases}
			 \text{No. of times $M$ vists a state $q$}
			 & \text{ if $M$ halts on $x$} \\
			 \text{undefined} & \text{ otherwise}
			\end{cases}
$
\newline
\textbf{Answer} \newline
The above resource function satisfies Blums first axiom i.e. it is defined only when $M$ halts on $x$. However, given a $M$,$x$,$k$ , it is not decidable
to check if COUNT(M,x) = k. Hence it is not a resource.

Consider $R= \{(M,x,k):COUNT(M,x)=k\}$

Suppose $R$ was decidable, then we can use it as a sub routine to decide the $HP$ as follows :

Construct a machine $N$ as follows:
\begin{itemize}
 \item Simulate $M$ on $x$.
 \item If $M$ halts on $x$, then have a trasition to a special accept state.
\end{itemize}

This gives the reduction from $R$ to $HP$.

\end{parts}

\question[5] 
Show that if $\NTIME(n) = \DTIME(n)$ then $\P = \NP$. (Padding !!)

\textbf{Answer} \newline

Let $NTIME(n) = DTIME(n)$. \newline
Let $L \in NP$ via a non-deterministic machine $M$. \newline
Consider $L_{pad} = \{x\#1^{|x|^{c}} : x \in L\}$ \newline

Consider a N which does the following on input y:
\begin{itemize}
 \item Check if $y=x\#1^{|x|^{c}}$.
 \item Extract $x$
 \item Run machine $M$ on $x$, to check if $x \in L $. If yes, accept. Else, reject.
\end{itemize}

The running time of the above machine is linear in its input size. Therefore, $L_{pad} \in NTIME(n)$. \newline
From assumption, $L_{pad} \in DTIME(n)$.Let the deterministic machine accpeting this be $N'$.

Consider a machine $M'$ which does the following: \newline
\begin{itemize}
 \item Construct $y=x\#1^{|x|^{c}}$
 \item Check if $y \in L_{pad}$. If yes, accept . Else , reject.
\end{itemize}

$L(M') = L$. The time taken by this deterministic machine is polynomial in its input length. Hence, $L \in P$.

\question[10]
 Space Hierarchy theorem implies the following: For any $k >
0$, There is a language in $\DSPACE(n^{k+1})$ that is not in
$\DSPACE(n^k)$. Use this and a padding argument to show that: $\P
\neq \DSPACE(n)$. (6pts) \\ (Note that we do not know the containment
in either direction.) \\ You can do this in two steps:
\begin{parts}
\part For every language $L$ define, $L_{pad} = \{x01^{|x|^2}~:~x
      \in L\}$.\\ Argue that $L_{pad}$ is in $\P$ $\implies$ $L \in
      \P$.
\part Show an $L_{pad}$ which is in $\DSPACE(n)$ but whose
      corresponding $L$ is not in $\DSPACE(n)$.
\end{parts}

\textbf{Answer} \newline
(a) For every language $L$ , let $L_{pad} = \{x01^{|x|^2}~:~x \in L\}$. \newline
Let $L_{pad} \in \P$ via a deterministic machine $M$ running in polynomial time. \newline
Given an input $y$, $M$ does the following
\begin{itemize}
 \item Checks if $y$ is of the form $x01^{|x|^2}$.
 \item Extracts $x$ out of it, and checks if $x \in L$.
\end{itemize}

Since, $M$ runs in polynomial time, it does steps 1 and 2 in polynomial time each. Given an $x$, checking if $x \in L$ can be done in polynomial time by a deterministic machine.
Hence, $L \in \P$.

(b) From space hierarchy theorem, $\exists$ $\A$ such that , $\A \in \DSPACE(n^2)$ but $\A \notin \DSPACE(n)$. \newline
Consider $\A_{pad} = \{x01^{|x|^2}~:~x \in A\}$ \newline
Consider a machine $N$ accepting $\A_{pad}$. It does the following
\begin{itemize}
 \item Checks if the input $y$ is of the form $x01^{|x|^2}$.
 \item It extracts $x$ from the input and checks if $x \in \A$.
\end{itemize}

This machine takes space $|x|^{2}$. That is $\DSPACE(n)$. (Since input size is $|x|^{2}$).
Hence, (b) is also true.

Now, it remains to show that (a) and (b) $\implies$ $\P \neq \DSPACE(n)$. \newline

This can be shown by contradiction. Suppose $\P = \DSPACE(n)$. Then $\A_{pad} \in \DSPACE(n) \implies \A_{pad} \in \P \implies \A \in \P \implies \A \in \DSPACE(n)$.
\newline
But this is a contradiction, because $\A$ belongs to $\DSPACE(n^{2})$ and not $\DSPACE(n)$.

Therefore, (a) and (b) $\implies$ $\P \neq \DSPACE(n)$.

\question[5]
Show that if $\SAT \in \NP \cap \co\NP$ then $\NP = \co\NP$. (Definitions !) \newline
\textbf{Answer} \newline
$\SAT$ is $\NP-Complete$ . Hence, for every language $L$ in $\NP$, there is a polynomial time reduction to $\SAT$. And,
$\SAT \in \NP \cap \co\NP$ $\Longrightarrow$ $L \in \NP \cap \co\NP$ $\Longrightarrow$ Every Language in $\NP$ belongs to $\NP \cap \co\NP$ $\Longrightarrow$ Every Language in $\NP$
 belongs to $\co\NP$ ...(1) \newline
 
 Consider a language $L'$ in $\co\NP$ $\Longrightarrow$ $\overline{L'} \in \NP$ $\Longrightarrow$ $\overline{L'} \in \NP \cap \co\NP$
 $\Longrightarrow$ $\overline{L'} \in \co\NP$ $\Longrightarrow$ $L' \in \NP$ .. (2)
 
 From (1) and (2), $\NP = \co\NP$.


\question[5]
If $L, L'$ are in $\NP$, then show that $L \cup L'$, $L \cap L'$ are in $\NP$. (Definitions !) \newline
\textbf{Answer} \newline
From defn, $L \in \NP$ $\Leftrightarrow$ there exists a polynomial length certificate $c_{1}$ which can be verified in polynomial time via a machine $M_{1}$. \newline
Similarly, $L' \in \NP$ $\Leftrightarrow$ there exists a polynomial length certificate $c_{2}$ which can be verified in polynomial time via a machine $M_{2}$. \newline

$L \cap L'$, construct a new certificate $c_{1}\#c_{2}$ . This is of polynomial size. To verify if $x \in L \cap L'$ , we need to construct a polynomial time running machine
which verifies $c_{1}$ and $c_{2}$. Construct a new machine $N$ which simulates first simulates $M_{1}$ on input $c_{1}$ and verifies if its the correct certificate of $L$.
If yes, it proceeds to simulating $M_{2}$ on $c_{2}$. Else rejects. Similarly if $c_{2}$ is verified as the correct certificate of $L'$ by simulation of $M_{2}$ then it will accept. Else reject.
Since simulation of both $M_{1}$ and $M_{2}$ takes polynomial time in the input length, hence $N$ also runs in polynomial time. \newline

$L \cup L'$, construct a new certificate $c_{1}\#c_{2}$ . This is of polynomial size. To verify if $x \in L \cup L'$ , we need to construct a polynomial time running machine
which verifies $c_{1}$ and $c_{2}$. Construct a new machine $N$ which simulates first simulates $M_{1}$ on input $c_{1}$ and verifies if its the correct certificate of $L$.
If no , it proceeds to simulating $M_{2}$ on $c_{2}$. Else accepts. If $c_{2}$ is verified as the correct certificate of $L'$ by simulation of $M_{2}$ then it will accept. Else reject.
Since simulation of both $M_{1}$ and $M_{2}$ takes polynomial time in the input length, hence $N$ also runs in polynomial time.

\question[5]
If $L, L'$ are in $\NP \cap \co\NP$, then show that $L \oplus  L'$ defined as 
\[ L \oplus L' = \{ x : x \textrm{ is in one of $L$ or $L'$ but not both.} \} \]
is in $\NP \cap \co\NP$. (Definitions !)\newline
\textbf{Answer} \newline
If $L \in \NP \cap \co\NP$ implies $\overline{L} \in \NP$. Similarly, $\overline{L'} \in \NP$.\newline
Let $c_{1},c_{2},c_{3},c_{4}$ be the polynomial size certificates verifiable in polynomial time corresponding to language $L,\overline{L},L',\overline{L'}$ respectively. \newline

Similar to the construction above we have to check if $c_{1}~and~c_{3}$ are the correct certificates or $c_{2}~and~c_{4}$ are correct certificates for the respectively
languages $L \cap \overline{L'}$ and $\overline{L} \cap L'$. Hence, $L \oplus  L' \in \NP$. \newline

Similarly, we have to check if $c_{1}~and~c_{4}$ are the correct certificates or $c_{2}~and~c_{3}$ are correct certificates for the respectively
languages $\overline{L} \cap \overline{L'}$ and $L \cap L'$. Hence, $L \oplus  L' \in \co\NP$.\newline

Therefore, $L \oplus  L' \in \NP \cap \co\NP$

\question[15]
Consider the following language: PRIMES $= \{ n ~|~ n
\textrm{ is a prime } \}$ where the input $n$ is in binary.  Without
using the known result that PRIMES is in $\P$, solve the following:
\begin{parts}
\part[5] Show that PRIMES is in $\co\NP$.
\newline
\textbf{Answer}\newline
To show that PRIMES $\in \co\NP$ , we have to show that $\overline{PRIMES} \in \NP$. \newline
$\overline{PRIMES} = \{n~| ~ \exists p,q~s.t.~p,q \neq 1~and~p \ast q = n\}$ \newline
Given p,q as a certificate (each of them need log n bits respectively and hence polynomial in the size of input n), we can verify if p $\ast$ q = n in polynomial time
as follows: \newline
Calculate n/p using long-division. Since each step of long division eliminates on digit from the dividend(and every step is polynomial in dividend length), hence it runs for polynomial time in the length
of dividend. Now check if the obtained quotient is equal to q and the obtained remainder is equal to 0 (This can be done in linear time with respect to length of q). \newline

Therefore,$\overline{PRIMES} \in \NP$ and hence PRIMES $\in \co\NP$.

\part[10] Here is Lucas test for primality (you dont need prove it) : $n$ is prime if and only if there is an integer $a \in \{2, \ldots,
  n-1\}$ with $a^{n-1} \equiv 1 \mod n$, and for every prime factor $q$ of $n-1$ : $a^{\frac{n-1}{q}} \not\equiv 1 \mod n$. Use this test to show that PRIMES is in $\NP$.
\newline
\textbf{Answer}\newline
Given a and the prime factorization of n-1 as a certificate, it is easy to verify the above condition of Lucas in O($log^{3}$(n)) time. Modular exponentiation takes
O(log n) time and at each stage multiplication takes O($log^{2}$(n)) steps. Now we have to show that $|a|$ + $|\text{prime factorization of n-1}|$ is a polynomial in log n. \newline

Clearly, since $a<n$, therefore it can be represented using log(n) bits. Now we have to check \newline
1) prime factorization of n-1 can be represented in poly in log(n) bits.\newline
2) Each of the prime factors should be further verified as a prime.\newline

Let n-1 be factorized as $p_{1}^{a_{1}}\ast p_{2}^{a_{2}}\ast ..p_{k}^{a_{k}}$. \newline
This product is greater than $2^{a_{1}}\ast 2^{a_{2}}\ast ... 2^{a_{k}}$.
Therefore, $a_{1}+a_{2}...a_{k}<log(n)$. Implies the number of prime factors of n-1 is utmost log(n). \newline

For each of $p_{1},p_{2}..p_{k}$, there will be another set of certificates. Each of these certificates is a polynomial in log(n) and verifiable in polynomial in log(n)(From strong induction, because each of
$p_{1},p_{2}..p_{k}$ is strictly smaller than n-1).
Hence, the total time for verifying the prime factorization for n-1 is (polynomial in log(n)) $\ast$ (polynomial in log(n)), which is polynomial in log(n).\newline
And since each of the prime factors can be log(n) length and there are log(n) of them, the total length is a polynomial in log(n).

Therefore, the certificate a , prime factors of (n-1) is a polynomial size in input length verifiable in polynomial time in input length. Therefore,
PRIMES $\in \NP$.
\end{parts}
Hence conclude that PRIMES is in $\NP$ $\cap$ $\co\NP$.

From (a),(b), PRIMES is in $\NP$ $\cap$ $\co\NP$.

\question[10] Prove that reachability in undirected forests (a possibly disconnected acyclic undirected graph) can be solved in $\log$-space. That is, given $(T,s,t)$ where $T$ is an undirected forest, it can be tested in $\log$-space whether $s$ is connected to $t$ by a path.

\question[18]
Let $\E = \bigcup_{c > 0} \DTIME(2^{cn})$ and $\NE = \bigcup_{c > 0} \NTIME(2^{cn})$. A set $A$ is called {\em sparse} if there is a polynomial $p$,
    such that $|\{ x \in A : |x| = n \}| \le p(n)$. A set $A$ is called
    {\em tally set} if $A \subseteq \{1\}^*$.  Prove that following
    are equivalent.
  \begin{enumerate}
  \item Restricted to tally sets $\NP = \P$. That is all tally sets in $\NP$ are in $\P$.
  \item Restricted to sparse sets $\NP = \P$. That is all sparse sets
    in $\NP$ are in $\P$.
  \item $\E = \NE$
  \end{enumerate}
  Hence conclude that $\E \ne \NE \implies \P \ne \NP$.
  
  \emph{Hint : Try for (b) $\implies$ (a) $\implies$ (c) $\implies$ (b). 
  For the second implication : consider the language $L_{tally} = \{1^{2^{c|x|}} : x \in L\}$.
  This will not work, but a slight modification of this language which includes some more information about 
  $x$ will work !. \\ For the third implication, consider the language 
\[ L_{order} = \{(k,i,c): \textrm{the $i^{th}$ bit of the $k^{th}$ string(in lex order) in L is $c$} \} \] }


\textbf{Answer}\newline

From the definition, every tally set $\A$ is a sparse set for a polynomial $p(n)=2$.Because $\A \subseteq \{1\}^{\ast}$ implies $\forall n$ $|\{|x|=n:x \in A\}|$ is either 0 or 1.\newline
Hence, (b) $\implies$ (a) is trivially true.


\question[7] 
Imagine a world in which $\P = \NP$. Now show that there is a
polynomial time algorithm which given a Boolean formula $\phi$ produces a satisfying assignment for $\phi$ if $\phi$ is satisfiable.(Hint : Use queries to SAT).
\newline
\textbf{Answer}\newline
We can get the assignments for $x_{1},x_{2},...x_{n}$ in n+1 queries to $\SAT$ as follows.
\begin{itemize}
 \item Firstly, make a query to $\SAT$ to find if $\phi$ is satisfiable. If no, immediately return.
 \item If $\phi$ is satisfiable, construct new expressions, $\phi_{1}$,$\phi_{2}$...$\phi_{n}$, where,
    $\phi_{i}=\phi \wedge x_{i}$.\newline
    If, $\phi_{i}$ is satisfiable(By query on $\SAT$) assign $x_{i}=1$. Else, assign $x_{i}=0$.
\end{itemize}

Since, $\P = \NP$, therefore there is a polynomial time algorithm to $\SAT$. And since, the number of queries to $\SAT$ is in $O(n)$(and $\phi$ has atleast n variables), therefore,
above algorithm runs in polynomial time.



\end{questions}



\end{document}
