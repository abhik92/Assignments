//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

import MainPackage.AliasTable;
import MainPackage.LiveRange;
import MainPackage.PairLiveRange;
import MainPackage.SymbolTable;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class MiniRAPrint<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//

	// Regarding the temps and label renaming
	static String currentFunction = "";
	static int numberOfParams = 0;
	static boolean functionName = false;
	static boolean label = true;

	static boolean v0 = false;
	static boolean v1 = false;
	static int fSP = 0;

	public boolean isTemp(String str) {
		return str.startsWith("TEMP ");

	}

	public void save_callee(int sp) {
		int i;
		int k = 0;
		for (i = sp; i < sp + 8; i++, k++)
			System.out.println("ASTORE SPILLEDARG " + i + " s" + k);

	}

	public void restore_callee(int sp) {
		int i, k = 0;
		for (i = sp - 8; i < sp; i++, k++)
			System.out.println("ALOAD s" + k + " SPILLEDARG " + i);

	}

	public void save_caller(int sp) {
		int i, k = 0;
		for (i = sp; i < sp + 10; i++, k++)
			System.out.println("ASTORE SPILLEDARG " + i + " t" + k);

	}

	public void restore_caller(int sp) {
		int i, k = 0;
		for (i = sp - 10; i < sp; i++, k++)
			System.out.println("ALOAD t" + k + " SPILLEDARG " + i);

	}

	public R visit(NodeList n) {
		// label = true;
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 ->
	 * <EOF>
	 */
	public R visit(Goal n) {
		R _ret = null;
		n.f0.accept(this);
		System.out.println(" MAIN [0]" + "["
				+ (SymbolTable.LinearRange.size() + 18) + "]" + "[100]");
		n.f1.accept(this);
		n.f2.accept(this);
		System.out.println(" END ");
		fSP = 0;
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
	 */
	public R visit(Procedure n) {
		R _ret = null;
		functionName = true;
		label = false;
		R lab = n.f0.accept(this);

		n.f1.accept(this);
		R intl = n.f2.accept(this);
		numberOfParams = Integer.parseInt((String) intl);
		if (numberOfParams >= 4)
			fSP += (numberOfParams - 3);
		System.out.println(lab + " [" + intl + "]["
				+ (SymbolTable.LinearRange.size() + 18) + "][100]");
		n.f3.accept(this);
		n.f4.accept(this);
		functionName = true;
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
	 * | HLoadStmt() | MoveStmt() | PrintStmt()
	 */
	public R visit(Stmt n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		System.out.print(" NOOP ");
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n) {
		R _ret = null;
		n.f0.accept(this);
		System.out.print(" ERROR ");
		return _ret;
	}

	/**
	 * f0 -> "CJUMP" f1 -> Temp() f2 -> Label()
	 */
	public R visit(CJumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R temp = n.f1.accept(this);
		label = false;
		R lab = n.f2.accept(this);
		if (SymbolTable.variableRegister.get(temp) != null) {
			System.out.print(" CJUMP ");
			System.out.print(SymbolTable.variableRegister.get(temp));
			System.out.println(" " + lab + " ");
		} else {
			String reg;
			if (!v1)
				reg = "v1";
			else
				reg = "v0";

			System.out.println("ALOAD " + reg + " SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp));

			System.out.print(" CJUMP " + reg + " ");
			System.out.println(" " + lab + " ");

		}
		return _ret;
	}

	/**
	 * f0 -> "JUMP" f1 -> Label()
	 */
	public R visit(JumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		System.out.print(" JUMP ");
		label = false;
		R lab = n.f1.accept(this);
		System.out.println(lab);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE" f1 -> Temp() f2 -> IntegerLiteral() f3 -> Temp()
	 */
	public R visit(HStoreStmt n) {
		R _ret = null;
		n.f0.accept(this);

		R temp1 = n.f1.accept(this);
		R intl = n.f2.accept(this);
		R temp2 = n.f3.accept(this);
		String reg1 = SymbolTable.variableRegister.get(temp1);
		String reg2 = SymbolTable.variableRegister.get(temp2);

		if (SymbolTable.variableRegister.get(temp1) == null) {
			String reg;
			if (!v1) {
				reg = "v1";
				v1 = true;
			} else {
				reg = "v0";
				v0 = true;

			}
			System.out.println("ALOAD " + reg + " SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp1));
			reg1 = reg;
		}
		if (SymbolTable.variableRegister.get(temp2) == null) {
			String reg;
			if (!v1) {
				reg = "v1";
				v1 = true;
			} else {
				reg = "v0";
				v0 = true;

			}
			System.out.println("ALOAD " + reg + " SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp2));
			reg2 = reg;

		}
		System.out.print(" HSTORE ");
		System.out.println(reg1 + " " + intl + " " + reg2);
		v1 = false;
		v0 = false;
		return _ret;
	}

	/**
	 * f0 -> "HLOAD" f1 -> Temp() f2 -> Temp() f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R temp1 = n.f1.accept(this);
		R temp2 = n.f2.accept(this);
		R intl = n.f3.accept(this);

		String reg1 = SymbolTable.variableRegister.get(temp1);
		String reg2 = SymbolTable.variableRegister.get(temp2);
		String reg = "";
		boolean sp = false;
		if (SymbolTable.variableRegister.get(temp1) == null) {

			if (!v1) {
				reg = "v1";
				v1 = true;
			} else {
				reg = "v0";
				v0 = true;

			}
			sp = true;
			reg1 = reg;
		}
		if (SymbolTable.variableRegister.get(temp2) == null) {
			if (!v1) {
				reg = "v1";
				v1 = true;
			} else {
				reg = "v0";
				v0 = true;

			}
			System.out.println("ALOAD " + reg + " SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp2));
			reg2 = reg;

		}
		System.out.print(" HLOAD ");
		System.out.println(reg1 + " " + reg2 + " " + intl);
		if (sp)
			System.out.println("ASTORE SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp1) + " " + reg);
		v0 = false;
		v1 = false;
		return _ret;
	}

	/**
	 * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
	 */
	public R visit(MoveStmt n) {
		R _ret = null;
		boolean c = true;
		boolean e = true;
		boolean sp = false;
		n.f0.accept(this);

		R temp = n.f1.accept(this);
		/*
		 * String reg = ""; if (n.f2.f0.which != 0 && n.f2.f0.which != 2) {
		 * 
		 * if (SymbolTable.variableRegister.get(temp) != null) {
		 * System.out.print(" MOVE ");
		 * System.out.print(SymbolTable.variableRegister.get(temp)); } else {
		 * 
		 * if (!v1) reg = "v1"; else reg = "v0";
		 * 
		 * System.out.print(" MOVE " + reg + " "); sp = true; }
		 * 
		 * c = true; e = true;
		 * 
		 * } else { if (n.f2.f0.which != 2) c = false; else e = false; }
		 */
		R exp = n.f2.accept(this);
		// CALL
		String reg = "";
		if (n.f2.f0.which == 0) {
			if (SymbolTable.variableRegister.get(temp) != null) {
				System.out.print(" MOVE ");
				System.out.print(SymbolTable.variableRegister.get(temp));
				System.out.println(" v0 ");
			} else {
				reg = "v1";

				System.out.print(" MOVE " + reg + " ");
				System.out.println(" v0 ");
				System.out.println("ASTORE " + " SPILLEDARG " +

				SymbolTable.variableLocation.get(temp) + " " + reg);

			}
		} else {

			String reg1 = SymbolTable.variableRegister.get(temp);
			if (SymbolTable.variableRegister.get(temp) == null) {

				if (!v1) {
					reg = "v1";
					v1 = true;
				} else {
					reg = "v0";
					v0 = true;

				}
				reg1 = reg;
			}
			if (SymbolTable.variableRegister.get(temp2) == null) {
				if (!v1) {
					reg = "v1";
					v1 = true;
				} else {
					reg = "v0";
					v0 = true;

				}
				System.out.println("ALOAD " + reg + " SPILLEDARG "
						+ SymbolTable.variableLocation.get(temp2));
				reg2 = reg;

			}

		}
		/*
		 * if (sp) System.out.println("ASTORE " + " SPILLEDARG " +
		 * SymbolTable.variableLocation.get(temp) + " " + reg); if (!e) {
		 * 
		 * if (SymbolTable.variableRegister.get(temp) != null) {
		 * System.out.print(" MOVE ");
		 * System.out.print(SymbolTable.variableRegister.get(temp));
		 * System.out.println(" " + exp + " "); } else { if (!v1) reg = "v1";
		 * else reg = "v0";
		 * 
		 * System.out.print(" MOVE " + reg + " "); System.out.println(" " + exp
		 * + " "); System.out.println("ASTORE " + " SPILLEDARG " +
		 * SymbolTable.variableLocation.get(temp) + " " + reg); }
		 * 
		 * } if (!c) { if (SymbolTable.variableRegister.get(temp) != null) {
		 * System.out.print(" MOVE ");
		 * System.out.print(SymbolTable.variableRegister.get(temp));
		 * System.out.println(" v0 "); } else { reg = "v1";
		 * 
		 * System.out.print(" MOVE " + reg + " "); System.out.println(" v0 ");
		 * System.out.println("ASTORE " + " SPILLEDARG " +
		 * SymbolTable.variableLocation.get(temp) + " " + reg);
		 * 
		 * }
		 * 
		 * }
		 */
		System.out.println();
		return _ret;
	}

	/**
	 * f0 -> "PRINT" f1 -> SimpleExp()
	 */
	public R visit(PrintStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R simExp = n.f1.accept(this);
		if (isTemp((String) simExp)) {

			if (SymbolTable.variableRegister.get(simExp) != null) {
				System.out.print(" PRINT ");
				System.out.println(SymbolTable.variableRegister.get(simExp));
			} else {
				String reg;
				if (!v1)
					reg = "v1";
				else
					reg = "v0";

				System.out.println("ALOAD " + reg + " SPILLEDARG "
						+ SymbolTable.variableLocation.get(simExp));

				System.out.println(" PRINT " + reg + " ");

			}
		} else
			System.out.println("PRINT " + simExp);

		return _ret;
	}

	/**
	 * f0 -> Call() | HAllocate() | BinOp() | SimpleExp()
	 */
	public R visit(Exp n) {
		R _ret = null;

		_ret = n.f0.accept(this);

		return _ret;
	}

	/**
	 * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> SimpleExp() f4 ->
	 * "END"
	 */
	public R visit(StmtExp n) {
		R _ret = null;
		/* Save callee saved registers */
		save_callee(fSP);
		fSP += 8;
		int i;
		for (i = 0; i < Math.min(4, numberOfParams); i++) {
			String var = "TEMP " + i + "#" + currentFunction;
			// System.out.println(var);
			var = AliasTable.getRAFromIR(var);
			if (var != null) {
				if (SymbolTable.variableRegister.get(var) != null)

					System.out.println("MOVE "
							+ SymbolTable.variableRegister.get(var) + " a" + i);
				else {
					System.out.println("MOVE v1 " + " a" + i);
					System.out.println("ASTORE SPILLEDARG "
							+ SymbolTable.variableLocation.get(var) + " v1 ");
				}

			}
		}
		for (i = 4; i < numberOfParams; i++) {
			String var = "TEMP " + i + "#" + currentFunction;
			// System.out.println(var);
			var = AliasTable.getRAFromIR(var);
			if (var != null) {
				System.out.println("ALOAD v1 SPILLEDARG " + (i - 4));
				if (SymbolTable.variableRegister.get(var) != null)
					System.out.println("MOVE "
							+ SymbolTable.variableRegister.get(var) + " v1");
				else
					System.out.println("ASTORE SPILLEDARG "
							+ SymbolTable.variableLocation.get(var) + " v1 ");
			}

		}
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		R simExp = n.f3.accept(this);
		if (isTemp((String) simExp)) {
			if (SymbolTable.variableRegister.get(simExp) != null)
				System.out.println(" MOVE v0 "
						+ SymbolTable.variableRegister.get(simExp));
			else
				System.out.println(" ASTORE SPILLEDARG "
						+ SymbolTable.variableLocation.get(simExp) + " v0 ");

		} else
			System.out.println(" MOVE v0 " + simExp);

		n.f4.accept(this);
		restore_callee(fSP);
		fSP = 0;
		System.out.println("END");

		return _ret;
	}

	/**
	 * f0 -> "CALL" f1 -> SimpleExp() f2 -> "(" f3 -> ( Temp() )* f4 -> ")"
	 */
	public R visit(Call n) {
		R _ret = null;
		Vector<Node> params = n.f3.nodes;
		int i = 0;
		for (Node node : params) {
			R exp = node.accept(this);
			if (i <= 3)
				System.out.println("MOVE a" + i + " "
						+ SymbolTable.variableRegister.get(exp));
			else
				System.out.println("PASSARG " + (i - 3) + " "
						+ SymbolTable.variableRegister.get(exp));

			i++;
		}

		n.f0.accept(this);

		R lab = n.f1.accept(this);
		save_caller(fSP);
		fSP += 10;
		if (isTemp((String) lab))
			System.out.println("CALL " + SymbolTable.variableRegister.get(lab));
		else
			System.out.println("CALL " + lab);
		n.f2.accept(this);
		// n.f3.accept(this);
		restore_caller(fSP);
		fSP -= 10;
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "HALLOCATE" f1 -> SimpleExp()
	 */
	public R visit(HAllocate n) {
		R _ret = null;
		String var = "";
		n.f0.accept(this);

		R simExp = n.f1.accept(this);

		System.out.print(" HALLOCATE ");
		if (isTemp((String) simExp)) {
			if (SymbolTable.variableRegister.get(simExp) != null)
				var = var + " HALLOCATE "
						+ SymbolTable.variableRegister.get(simExp);
			else {
				System.out.println("ALOAD v1 SPILLEDARG "
						+ SymbolTable.variableLocation.get(simExp));
				var = var + " HALLOCATE v1";
				v1 = true;
			}

		} else
			var = var + " HALLOCATE " + simExp;

		return (R) var;
	}

	/**
	 * f0 -> Operator() f1 -> Temp() f2 -> SimpleExp()
	 */
	public R visit(BinOp n) {
		R _ret = null;
		R op = n.f0.accept(this);
		R temp = n.f1.accept(this);
		R simExp = n.f2.accept(this);

		String reg1 = SymbolTable.variableRegister.get(temp);
		String reg2;
		if (isTemp((String) simExp))
			reg2 = SymbolTable.variableRegister.get(simExp);
		else
			reg2 = (String) simExp;

		if (SymbolTable.variableRegister.get(temp) == null) {
			String reg;
			if (!v1) {
				reg = "v1";
				v1 = true;
			} else {
				reg = "v0";
				v0 = true;

			}
			System.out.println("ALOAD " + reg + " SPILLEDARG "
					+ SymbolTable.variableLocation.get(temp));
			reg1 = reg;
		}
		if (isTemp((String) simExp)) {
			if (SymbolTable.variableRegister.get(simExp) == null) {
				String reg;
				if (!v1) {
					reg = "v1";
					v1 = true;
				} else {
					reg = "v0";
					v0 = true;

				}
				System.out.println("ALOAD " + reg + " SPILLEDARG "
						+ SymbolTable.variableLocation.get(simExp));
				reg2 = reg;
			}
		}
		System.out.print(" MOVE v0 ");
		System.out.println(op + " " + reg1 + " " + reg2);
		v0 = false;
		v1 = false;

		return (R) "v0";
	}

	/**
	 * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES"
	 */
	public R visit(Operator n) {
		R _ret = null;
		n.f0.accept(this);

		switch (n.f0.which) {
		case 0:
			_ret = (R) " LT ";
			break;
		case 1:
			_ret = (R) " PLUS ";
			break;
		case 2:
			_ret = (R) " MINUS ";
			break;
		case 3:
			_ret = (R) " TIMES ";
			break;
		}

		return _ret;
	}

	/**
	 * f0 -> Temp() | IntegerLiteral() | Label()
	 */
	public R visit(SimpleExp n) {
		R _ret = null;
		if (n.f0.which == 2)
			label = false;
		_ret = n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "TEMP" f1 -> IntegerLiteral()
	 */
	public R visit(Temp n) {
		R _ret = null;
		n.f0.accept(this);
		R intl = n.f1.accept(this);

		String hash = "TEMP " + intl + "#" + currentFunction;
		String var = AliasTable.IRtoRA.get(hash);

		return (R) var;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		n.f0.accept(this);
		return (R) n.f0.tokenImage;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n) {
		R _ret = null;

		String var = n.f0.tokenImage + "#" + currentFunction;
		if (functionName) {
			functionName = false;
			currentFunction = n.f0.tokenImage;
		}
		if (!SymbolTable.functions.contains(n.f0.tokenImage))
			_ret = (R) AliasTable.IRtoRA.get(var);
		else
			_ret = (R) n.f0.tokenImage;

		if (label) {
			System.out.print(" " + _ret + " ");
		}
		label = true;
		// n.f0.accept(this);
		return _ret;
	}

}
