//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;
import java.util.ResourceBundle.Control;

import MainPackage.ControlFlowNode;
import MainPackage.SymbolTable;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//

	static SymbolTable symt = new SymbolTable();
	static int nodeNumber = 0; // Node number starts from zero
	static Stack<String> flow = new Stack<String>();

	public boolean isTemp(String str) {
		return str.startsWith("TEMP ");

	}
	
	public void connectEdges(ControlFlowNode N , Integer I)
	{
		
	}

	public R visit(NodeList n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 ->
	 * <EOF>
	 */
	public R visit(Goal n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public R visit(StmtList n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
	 */
	public R visit(Procedure n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
	 * | HLoadStmt() | MoveStmt() | PrintStmt()
	 */
	public R visit(Stmt n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	public R visit(NoOpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	public R visit(ErrorStmt n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "CJUMP" f1 -> Temp() f2 -> Label()
	 */
	public R visit(CJumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R used = n.f1.accept(this);
		R label = n.f2.accept(this);

		ControlFlowNode N = new ControlFlowNode();
		connectEdges(N, nodeNumber);
		while (!flow.empty()) {
			String top = flow.pop();
			if (top.startsWith("PATCHED")) {
				String spl[] = top.split(":");
				int inNode = Integer.parseInt(spl[2]);
				ControlFlowNode R = symt.getNodeFromVertex(inNode);
				R.outNodes.add(nodeNumber);
				symt.insert(R, inNode);
				N.inNodes.add(nodeNumber);
			}

		}
		N.typeOfInstruction = "cjump";
		N.used.add((String) used);

		flow.push("BACKPATCH:" + label + ":" + nodeNumber);
		flow.push("" + nodeNumber);
		symt.insert(N, nodeNumber++);
		return _ret;
	}

	/**
	 * f0 -> "JUMP" f1 -> Label()
	 */
	public R visit(JumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE" f1 -> Temp() f2 -> IntegerLiteral() f3 -> Temp()
	 */
	public R visit(HStoreStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R def = n.f1.accept(this);
		n.f2.accept(this);
		R used = n.f3.accept(this);

		ControlFlowNode N = new ControlFlowNode();
		N.typeOfInstruction = "hstore";
		N.used.add((String) used);
		N.defined.add((String) def);

		symt.insert(N, nodeNumber++);
		return _ret;
	}

	/**
	 * f0 -> "HLOAD" f1 -> Temp() f2 -> Temp() f3 -> IntegerLiteral()
	 */
	public R visit(HLoadStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R used = n.f1.accept(this);
		R def = n.f2.accept(this);
		n.f3.accept(this);

		ControlFlowNode N = new ControlFlowNode();
		N.typeOfInstruction = "hload";
		N.used.add((String) used);
		N.defined.add((String) def);

		symt.insert(N, nodeNumber++);
		return _ret;
	}

	/**
	 * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
	 */
	public R visit(MoveStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R def = n.f1.accept(this);
		R exp = n.f2.accept(this);

		ControlFlowNode N = new ControlFlowNode();
		N.typeOfInstruction = "move";
		N.used = (Vector<String>) exp;
		N.defined.add((String) def);

		symt.insert(N, nodeNumber++);

		return _ret;
	}

	/**
	 * f0 -> "PRINT" f1 -> SimpleExp()
	 */
	public R visit(PrintStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R simExp = n.f1.accept(this);

		ControlFlowNode N = new ControlFlowNode();
		N.typeOfInstruction = "print";
		N.used.add((String) simExp);

		symt.insert(N, nodeNumber++);
		return _ret;
	}

	/**
	 * f0 -> Call() | HAllocate() | BinOp() | SimpleExp()
	 */
	public R visit(Exp n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		if (n.f0.which == 3) {
			Vector<String> used = new Vector<String>();
			used.add((String) _ret);
			return (R) used;

		}

		return _ret;
	}

	/**
	 * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> SimpleExp() f4 ->
	 * "END"
	 */
	public R visit(StmtExp n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "CALL" f1 -> SimpleExp() f2 -> "(" f3 -> ( Temp() )* f4 -> ")"
	 */
	public R visit(Call n) {
		Vector<String> used = new Vector<String>();
		n.f0.accept(this);
		R simExp = n.f1.accept(this);
		if (isTemp((String) simExp))
			used.add((String) simExp);
		n.f2.accept(this);
		// n.f3.accept(this);
		Vector<Node> params = n.f3.nodes;
		for (Node node : params) {
			R exp = node.accept(this);
			if (isTemp((String) exp))
				used.add((String) exp);
		}
		n.f4.accept(this);
		return (R) used;
	}

	/**
	 * f0 -> "HALLOCATE" f1 -> SimpleExp()
	 */
	public R visit(HAllocate n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);
		Vector<String> used = new Vector<String>();
		if (isTemp((String) _ret))
			used.add((String) _ret);
		return (R) used;
	}

	/**
	 * f0 -> Operator() f1 -> Temp() f2 -> SimpleExp()
	 */
	public R visit(BinOp n) {
		n.f0.accept(this);
		R temp = n.f1.accept(this);
		R simExp = n.f2.accept(this);

		Vector<String> used = new Vector<String>();
		used.add((String) temp);
		if (isTemp((String) simExp))
			used.add((String) simExp);

		return (R) used;
	}

	/**
	 * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES"
	 */
	public R visit(Operator n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Temp() | IntegerLiteral() | Label()
	 */
	public R visit(SimpleExp n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "TEMP" f1 -> IntegerLiteral()
	 */
	public R visit(Temp n) {
		R _ret = null;
		n.f0.accept(this);
		R intl = n.f1.accept(this);
		String var = "TEMP " + intl;
		return (R) var;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) n.f0.tokenImage;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Label n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) n.f0.tokenImage;
	}

}
