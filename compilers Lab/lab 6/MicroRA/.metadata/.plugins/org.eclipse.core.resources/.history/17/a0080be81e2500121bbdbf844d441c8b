package MainPackage;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Vector;

import visitor.GJNoArguDepthFirst;

public class SymbolTable {

	public static HashMap<ControlFlowNode, Integer> nodeToVertex = new HashMap<ControlFlowNode, Integer>();
	public static HashMap<Integer, ControlFlowNode> vertexToNode = new HashMap<Integer, ControlFlowNode>();
	public static HashMap<String, LiveRange> liveRanges = new HashMap<String, LiveRange>();
	public static HashMap<PairLiveRange, String> registers = new HashMap<PairLiveRange, String>();
	public static HashMap<PairLiveRange, Integer> location = new HashMap<PairLiveRange, Integer>();

	public static Vector<String> functions = new Vector<String>();

	public static HashMap<String, String> variableRegister = new HashMap<String, String>();
	public static int stackPointer = 18;// 0-17 reserved for storing the
										// variables

	public static Vector<Pair> nodeList = new Vector<Pair>();
	public static Vector<PairLiveRange> LinearRange = new Vector<PairLiveRange>();

	public void insert(ControlFlowNode N, Integer I) {
		nodeToVertex.put(N, I);
		vertexToNode.put(I, N);
	}

	public int getVertexFromNode(ControlFlowNode N) {
		if (nodeToVertex.containsKey(N))
			return nodeToVertex.get(N);

		return -1; // -1 indicates that the vertex is not present
	}

	public ControlFlowNode getNodeFromVertex(Integer I) {
		if (vertexToNode.containsKey(I))
			return vertexToNode.get(I);

		return null;
	}

	public static void populateNodes() {
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> e = nodeToVertex
				.entrySet();
		for (java.util.Map.Entry<ControlFlowNode, Integer> i : e) {
			nodeList.add(new Pair(i.getKey(), i.getValue()));
		}
	}

	// Connects the edges between jump statements
	public static void connectLabels() {
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> i1 = nodeToVertex
				.entrySet();
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> i2 = nodeToVertex
				.entrySet();

		for (java.util.Map.Entry<ControlFlowNode, Integer> i : i1) {
			if (!i.getKey().toLabel.equals("")) {
				String lab = i.getKey().toLabel;
				for (java.util.Map.Entry<ControlFlowNode, Integer> j : i2) {
					if (j.getKey().currentLabel.equals(lab)) {
						// i.getKey().succ.add(j.getValue());
						j.getKey().pre.add(i.getValue());
					}
				}
			}
		}
	}

	// Gets the successors of all the nodes from the predeccessors of the nodes
	public static void getSuccessors() {
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> i1 = nodeToVertex
				.entrySet();
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> i2 = nodeToVertex
				.entrySet();

		for (java.util.Map.Entry<ControlFlowNode, Integer> i : i1) {
			for (Integer succ : i.getKey().pre) {
				for (java.util.Map.Entry<ControlFlowNode, Integer> j : i2) {
					if (j.getValue().equals(succ))
						j.getKey().succ.add(i.getValue());
				}
			}

		}

	}

	// Populate the variable register map
	public static void populateRegisterMap() {
		Set<java.util.Map.Entry<PairLiveRange, String>> e1 = SymbolTable.registers
				.entrySet();

		for (java.util.Map.Entry<PairLiveRange, String> t : e1) {
			variableRegister.put(t.getKey().first, t.getValue());
		}

	}

	// Performs Set difference A - B
	public static Vector<String> setDifference(Vector<String> A,
			Vector<String> B) {
		Vector<String> result = new Vector<String>();
		for (String s : A) {
			if (!B.contains(s))
				result.add(s);
		}
		return result;

	}

	// Performs set union A U B
	public static Vector<String> setUnion(Vector<String> A, Vector<String> B) {
		Vector<String> result = new Vector<String>();
		for (String s : A) {
			result.add(s);
		}
		for (String s : B) {
			if (!result.contains(s))
				result.add(s);
		}
		return result;
	}

	// Checks for the termination condition of the outer liveness analysis loop
	public static boolean noChange() {
		for (Pair N : nodeList) {
			ControlFlowNode n = N.first;
			if (!n.liveIn.equals(n.inPrime) || !n.liveOut.equals(n.outPrime))
				return false;
		}
		return true;
	}

	public static void livenessAnalysis() {
		for (Pair N : nodeList) {
			if (N.second == 0)
				N.first.liveOut.addAll(N.first.defined);
		}
		do {

			for (Pair N : nodeList) {

				ControlFlowNode n = N.first;

				// in'[n]<-in[n]
				n.inPrime.removeAllElements();
				n.inPrime.addAll(n.liveIn);

				// out'[n]<-out[n]
				n.outPrime.removeAllElements();
				n.outPrime.addAll(n.liveOut);

				// in[n] ← use[n] ∪ (out[n] − def [n]);
				n.liveIn.removeAllElements();
				n.liveIn.addAll(setUnion(n.used,
						setDifference(n.liveOut, n.defined)));

				// out[n] ← U(s∈succ[n]) in[s] ;
				n.liveOut.removeAllElements();
				for (Integer I : n.succ) {
					ControlFlowNode successor = new ControlFlowNode();
					for (Pair iter : nodeList) {
						if (iter.second.equals(I)) {
							successor = iter.first;
							break;
						}
					}
					n.liveOut.addAll(setUnion(n.liveOut, successor.liveIn));

				}

			}
		} while (!noChange());

	}

	public static void getLiveRanges() {
		Set<java.util.Map.Entry<ControlFlowNode, Integer>> nodes = nodeToVertex
				.entrySet();
		Set<java.util.Map.Entry<String, LiveRange>> variables = liveRanges
				.entrySet();
		for (java.util.Map.Entry<String, LiveRange> var : variables) {
			int start = 0, end = -1; // unset initially
			String temp = var.getKey();
			for (java.util.Map.Entry<ControlFlowNode, Integer> N : nodes) {
				ControlFlowNode n = N.getKey();
				if (n.liveOut.contains(temp)) {
					if (start == -1) {
						start = N.getValue();
					} else if (N.getValue() < start)
						start = N.getValue();
				}
				if (n.defined.contains(temp)) {
					if (start == -1) {
						start = N.getValue();
					} else if (N.getValue() < start)
						start = N.getValue();
				}
				if (n.liveIn.contains(temp)) {
					if (end == -1) {
						end = N.getValue();
					} else if (N.getValue() > end)
						end = N.getValue();
				}
			}
			var.getValue().start = start;
			var.getValue().end = end;
		}

	}

	public static void sort() {
		Set<java.util.Map.Entry<String, LiveRange>> temps = liveRanges
				.entrySet();

		for (Entry<String, LiveRange> iter : temps) {
			PairLiveRange p = new PairLiveRange(iter.getKey(), iter.getValue());
			LinearRange.add(p);
		}

		Collections.sort(LinearRange, new Comparator<PairLiveRange>() {
			public int compare(PairLiveRange o1, PairLiveRange o2) {
				return o1.second.start - o2.second.start;
			}
		});
	}

	/* Linear Scan ALgorithm Here */
	static Vector<PairLiveRange> active = new Vector<PairLiveRange>();
	static Vector<String> freeRegisters = new Vector<String>();

	public static void addSorted(PairLiveRange i) {
		active.add(i);

		Collections.sort(active, new Comparator<PairLiveRange>() {
			public int compare(PairLiveRange o1, PairLiveRange o2) {
				return o1.second.end - o2.second.end;
			}
		});

	}

	public static void ExpireOldIntervals(PairLiveRange i) {
		Vector<PairLiveRange> temporary = new Vector<PairLiveRange>();
		for (PairLiveRange P : active)
			temporary.add(P);

		for (PairLiveRange j : temporary) {
			if (j.second.end > i.second.start)
				break;
			active.remove(j);
			freeRegisters.add(registers.get(j));
		}

	}

	public static void SpillAtInterval(PairLiveRange i) {
		PairLiveRange spill = active.lastElement();
		if (spill.second.end >= i.second.end) {
			registers.put(i, registers.get(spill));
			location.put(spill, stackPointer);
			stackPointer++;
			active.remove(spill);
			addSorted(i);
		} else
			location.put(i, stackPointer++);

	}

	public static void linearScan() {
		sort();
		freeRegisters.add("s0");
		freeRegisters.add("s1");
		freeRegisters.add("s2");
		freeRegisters.add("s3");
		freeRegisters.add("s4");
		freeRegisters.add("s5");
		freeRegisters.add("s6");
		freeRegisters.add("s7");

		freeRegisters.add("t0");
		freeRegisters.add("t1");
		freeRegisters.add("t2");
		freeRegisters.add("t3");
		freeRegisters.add("t4");
		freeRegisters.add("t5");
		freeRegisters.add("t6");
		freeRegisters.add("t7");
		freeRegisters.add("t8");
		freeRegisters.add("t9");

		active.clear();
		for (PairLiveRange i : LinearRange) {
			ExpireOldIntervals(i);
			if (active.size() == 18)
				SpillAtInterval(i);
			else {

				registers.put(i, freeRegisters.firstElement());
				freeRegisters.remove(0);
				addSorted(i);
			}
		}
	}

	public static void sync() {
		nodeToVertex = new HashMap<ControlFlowNode, Integer>();
		vertexToNode = new HashMap<Integer, ControlFlowNode>();
		for (Pair p : nodeList) {
			nodeToVertex.put(p.first, p.second);
			vertexToNode.put(p.second, p.first);
		}
	}
}
