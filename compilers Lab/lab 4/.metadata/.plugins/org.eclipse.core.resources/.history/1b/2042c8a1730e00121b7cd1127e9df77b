//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;
import java.util.Map.Entry;
import java.util.logging.Logger;

import MainPackage.FunctionClass;
import MainPackage.SymbolTable;
import MainPackage.VariableClass;
import MainPackage.Class;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst_Parse2<R> implements GJNoArguVisitor<R> {
	/* Set of helper variables and functions */
	public SymbolTable symt;
	public int labelNumber = 0;
	public String params = new String();
	// public String statement = new String();

	public String method = new String();
	public String classStar = new String();

	public int k = -1;
	public Vector<ArrayList<String>> paraStack = new Vector<ArrayList<String>>();

	public static HashMap<Integer, Object> tempTable = new HashMap<Integer, Object>();

	public GJNoArguDepthFirst_Parse2(SymbolTable sym) {
		this.symt = sym;
		SymbolTable.currentClass = null;
		SymbolTable.currentFunction = null;
	}

	public ArrayList<FunctionClass> getFunctions(String className) {
		ArrayList<FunctionClass> funcs = new ArrayList<FunctionClass>();
		Set<Entry<String, Object>> allElements = SymbolTable.mainTable
				.entrySet();
		for (Entry<String, Object> s : allElements) {
			String key = s.getKey();
			String values[] = key.split("\\s+");
			if (values[0].equals("function") && values[2].equals(className)) {
				Object o = s.getValue();
				funcs.add((FunctionClass) o);

			}
		}
		return funcs;
	}

	public String returnTempNumber(String exp) {
		String hashString = symt.hashString("variable", exp,
				SymbolTable.currentClass, SymbolTable.currentFunction);
		String ret = "";
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Function Variable
			VariableClass V = ((VariableClass) symt.query(hashString));
			int val = V.tempNumber;

			if (V.type.equals("int[]")) {

				ret = ret + " TEMP " + V.locationOfSize + " ";
			} else
				ret = ret + " TEMP " + val + " ";

		}
		hashString = symt.hashString("variable", exp, SymbolTable.currentClass,
				null);
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Class variable

			ArrayList<Object> VariableTable = (ArrayList<Object>) tempTable
					.get(0);
			int offset = 4;
			for (Object o : VariableTable) {
				if (o instanceof String)
					continue;

				VariableClass objToVar = (VariableClass) o;
				if (objToVar.name.equals(exp)) {

					break;
				}

				offset += 4;
			}
			ret = ret + " BEGIN HLOAD TEMP " + SymbolTable.maxTempNumber
					+ " TEMP 0 " + offset + " RETURN TEMP "
					+ SymbolTable.maxTempNumber + " END";
			SymbolTable.maxTempNumber++;
		}
		return ret;
	}

	public ArrayList<VariableClass> getVariables(String className) {
		ArrayList<VariableClass> vars = new ArrayList<VariableClass>();
		Set<Entry<String, Object>> allElements = SymbolTable.mainTable
				.entrySet();
		for (Entry<String, Object> s : allElements) {
			String key = s.getKey();
			String values[] = key.split("\\s+");
			if (values[0].equals("variable") && values[2].equals(className)
					&& values[3].equals("null")) {
				Object o = s.getValue();
				vars.add((VariableClass) o);

			}
		}
		return vars;
	}

	public R IType(R var) {
		if (var == "int" || var == "int[]" || var == "boolean") {
			return var;

		} else {
			String hashString = symt.hashString("variable", (String) var,
					SymbolTable.currentClass, SymbolTable.currentFunction);

			VariableClass V;
			if (SymbolTable.mainTable.containsKey(hashString)) {
				V = (VariableClass) symt.query(hashString);
				return (R) V.type;
			}

			hashString = symt.hashString("variable", (String) var,
					SymbolTable.currentClass, null);

			if (SymbolTable.mainTable.containsKey(hashString)) {
				V = (VariableClass) symt.query(hashString);
				return (R) V.type;
			}

			hashString = symt.hashString("function", (String) var,
					SymbolTable.currentClass, SymbolTable.currentFunction);

			FunctionClass F;
			if (SymbolTable.mainTable.containsKey(hashString)) {
				F = (FunctionClass) symt.query(hashString);
				return (R) F.retType;
			}

			hashString = symt.hashString("class", (String) ClassName(var),
					(String) ClassName(var), null);

			Class C;
			if (SymbolTable.mainTable.containsKey(hashString)) {
				C = (Class) symt.query(hashString);
				return (R) C.name;
			}
		}

		return null;
	}

	public R ClassName(R var) {

		String currentClass = SymbolTable.currentClass;
		ArrayList<String> listOfAlias = new ArrayList<String>();

		listOfAlias = SymbolTable.Alias.get(currentClass);

		String hashString = symt.hashString("variable", (String) var,
				SymbolTable.currentClass, SymbolTable.currentFunction);
		VariableClass V;
		if (SymbolTable.mainTable.containsKey(hashString)) {
			V = (VariableClass) symt.query(hashString);
			return (R) V.type;
		}

		hashString = symt.hashString("variable", (String) var,
				SymbolTable.currentClass, null);
		if (SymbolTable.mainTable.containsKey(hashString)) {
			V = (VariableClass) symt.query(hashString);

			return (R) V.type;
		}

		return var;
	}

	public R visit(NodeList n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
	 */
	public R visit(Goal n) {

		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
	 * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
	 * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
	 * "}" f16 -> "}"
	 */
	public R visit(MainClass n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		String var = "";
		var = var + " MAIN ";
		System.out.println(var);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		n.f14.accept(this);
		n.f15.accept(this);
		n.f16.accept(this);
		var = "";
		var = var + " END ";
		System.out.println(var);
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
	 */
	public R visit(TypeDeclaration n) {
		R _ret = null;
		if (n.f0.which == 0) {
			String name = ((ClassDeclaration) n.f0.choice).f1.f0.tokenImage;
			SymbolTable.currentClass = name;

			ArrayList<Object> varTable = new ArrayList<Object>();
			ArrayList<FunctionClass> funcTable = new ArrayList<FunctionClass>();

			ArrayList<FunctionClass> func = this.getFunctions(name);
			ArrayList<VariableClass> vars = this.getVariables(name);

			funcTable.addAll(func);
			tempTable.put(21, funcTable);

			varTable.add("TEMP " + 21);
			varTable.addAll(vars);

			tempTable.put(0, varTable);

		}
		if (n.f0.which == 1) {
			String name = ((ClassExtendsDeclaration) n.f0.choice).f1.f0.tokenImage;
			SymbolTable.currentClass = name;

			ArrayList<Object> varTable = new ArrayList<Object>();
			ArrayList<FunctionClass> funcTable = new ArrayList<FunctionClass>();

			ArrayList<FunctionClass> func = this.getFunctions(name);
			ArrayList<VariableClass> vars = this.getVariables(name);

			funcTable.addAll(func);
			tempTable.put(21, funcTable);

			varTable.add("TEMP " + 21);
			varTable.addAll(vars);

			tempTable.put(0, varTable);

		}
		SymbolTable.currentFunction = null;
		_ret = n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4
	 * -> ( MethodDeclaration() )* f5 -> "}"
	 */
	public R visit(ClassDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		_ret = n.f4.accept(this);
		n.f5.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
	 * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
	 */
	public R visit(ClassExtendsDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier() f2 -> ";"
	 */
	public R visit(VarDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> (
	 * FormalParameterList() )? f5 -> ")" f6 -> "{" f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )* f9 -> "return" f10 -> Expression() f11 -> ";" f12
	 * -> "}"
	 */
	public R visit(MethodDeclaration n) {
		R _ret = null;
		String name = n.f2.f0.tokenImage;
		SymbolTable.currentFunction = name;

		n.f0.accept(this);
		R ret1 = n.f1.accept(this);
		R methodName = n.f2.accept(this);
		String var = SymbolTable.currentClass + "_" + (String) methodName
				+ " [ ";
		String hashString = symt.hashString("function", (String) methodName,
				SymbolTable.currentClass, (String) methodName);
		FunctionClass F = (FunctionClass) symt.query(hashString);
		int numberOfParams = F.formalParamList.size();
		var = var + (numberOfParams + 1) + " ] ";
		var = var + " BEGIN ";
		System.out.println(var);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		R ret2 = n.f10.accept(this);
		var = "";
		var = var + " RETURN " + ret2;
		System.out.println(var);
		n.f11.accept(this);
		n.f12.accept(this);
		var = "";
		var = var + " END ";

		System.out.println(var);

		return (R) (var + "\n");
	}

	/**
	 * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
	 */
	public R visit(FormalParameterList n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);

		return _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier()
	 */
	public R visit(FormalParameter n) {
		R _ret = null;
		R type = n.f0.accept(this);
		R iden = n.f1.accept(this);

		String hashString = symt.hashString("variable", (String) iden,
				SymbolTable.currentClass, SymbolTable.currentFunction);

		VariableClass V = (VariableClass) symt.query(hashString);
		if (V.type.equals("int[]")) {
			// Array Type
			// TODO: Get the size from the actual parameter and then do same as
			// new int[]
		} else if (!(V.type.equals("int") && V.type.equals("boolean"))) {
			// Class type

			ArrayList<Object> varTable = new ArrayList<Object>();
			ArrayList<FunctionClass> funcTable = new ArrayList<FunctionClass>();

			ArrayList<FunctionClass> func = this.getFunctions(V.type);
			ArrayList<VariableClass> vars = this.getVariables(V.type);

			funcTable.addAll(func);
			tempTable.put(-1 * (V.tempNumber * 10), funcTable);

			varTable.add("TEMP " + -1 * (V.tempNumber * 10));
			varTable.addAll(vars);
			tempTable.put(V.tempNumber, varTable);

		}

		return _ret;
	}

	/**
	 * f0 -> "," f1 -> FormalParameter()
	 */
	public R visit(FormalParameterRest n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
	 */
	public R visit(Type n) {
		R _ret = null;
		n.f0.accept(this);
		if (n.f0.which == 0)
			_ret = (R) "int[]";
		if (n.f0.which == 1)
			_ret = (R) "boolean";
		if (n.f0.which == 2)
			_ret = (R) "int";
		if (n.f0.which == 3)
			_ret = (R) ((Identifier) (n.f0.choice)).f0.tokenImage;
		return _ret;
	}

	/**
	 * f0 -> "int" f1 -> "[" f2 -> "]"
	 */
	public R visit(ArrayType n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public R visit(BooleanType n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public R visit(IntegerType n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
	 * IfStatement() | WhileStatement() | PrintStatement()
	 */
	public R visit(Statement n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		return (R) _ret;
	}

	/**
	 * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
	 */
	public R visit(Block n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);
		n.f2.accept(this);

		return (R) _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
	 */
	public R visit(AssignmentStatement n) {
		R _ret = null;
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		n.f3.accept(this);
		String variableName = (String) ret1;

		int arrayNumber = 0;
		String exp = (String) ret2;

		String hashString = symt.hashString("variable", variableName,
				SymbolTable.currentClass, SymbolTable.currentFunction);

		String var = "";
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Function Variable
			VariableClass V = (VariableClass) symt.query(hashString);
			var = " MOVE " + "TEMP " + V.tempNumber + " " + (String) ret2;
			
			//Array Type
			if (V.type.equals("int[]")) {
				int size = exp.split("RETURN").length;
				String values = exp.split("RETURN")[size - 1].split("\\s+")[2];
				V.locationOfSize = Integer.parseInt(values);
				symt.push(hashString, V);
			}
			
			//Class Type
			// Same as Array
			

		}
		hashString = symt.hashString("variable", variableName,
				SymbolTable.currentClass, null);
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Class Variable

			ArrayList<VariableClass> V = this
					.getVariables(SymbolTable.currentClass);
			int offset = 4;
			for (VariableClass v : V) {
				if (v.name.equals(variableName)) {
					if (v.type.equals("int[]")) {
						int size = exp.split("RETURN").length;
						String values = exp.split("RETURN")[size - 1]
								.split("\\s+")[2];
						v.locationOfSize = Integer.parseInt(values);
						symt.push(hashString, v);
					}

					break;
				}
				offset += 4;
			}

			var = " HSTORE TEMP 0 " + offset + " " + (String) ret2;

		}
		System.out.println(var);
		return (R) _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 ->
	 * Expression() f6 -> ";"
	 */
	public R visit(ArrayAssignmentStatement n) {
		R identifier = n.f0.accept(this);
		n.f1.accept(this);
		R expression1 = n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		R expression2 = n.f5.accept(this);
		n.f6.accept(this);

		String valOne = this.returnTempNumber((String) expression1);
		if (!valOne.equals(""))
			expression1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) expression2);
		if (!valTwo.equals(""))
			expression2 = (R) valTwo;

		String var = "";
		String firstString = "";
		String secondString = "";
		int offset = 0;

		String hashString;
		hashString = symt.hashString("variable", (String) identifier,
				SymbolTable.currentClass, null);

		if (SymbolTable.mainTable.containsKey(hashString)) {

			ArrayList<Object> V = (ArrayList<Object>) this.tempTable.get(0);
			offset = 4;
			for (Object o : V) {
				if (o instanceof String)
					continue;
				VariableClass v = (VariableClass) o;
				if (v.name.equals((String) identifier)) {
					break;
				}
				offset += 4;

			}

			firstString = firstString + " BEGIN HLOAD TEMP "
					+ SymbolTable.maxTempNumber + " TEMP 0 " + offset;
			firstString = firstString + " RETURN TEMP "
					+ SymbolTable.maxTempNumber + " END ";

			SymbolTable.maxTempNumber++;
		}

		hashString = symt.hashString("variable", (String) identifier,
				SymbolTable.currentClass, SymbolTable.currentFunction);

		if (SymbolTable.mainTable.containsKey(hashString)) {
			VariableClass V = (VariableClass) symt.query(hashString);
			firstString = firstString + " BEGIN MOVE TEMP "
					+ SymbolTable.maxTempNumber + " " + V.tempNumber;
			firstString = firstString + " RETURN TEMP "
					+ SymbolTable.maxTempNumber + " END ";

			SymbolTable.maxTempNumber++;
		}

		secondString = secondString + " BEGIN " + " MOVE TEMP "
				+ SymbolTable.maxTempNumber + " TIMES 4 ";
		SymbolTable.maxTempNumber++;
		secondString = secondString + expression1;
		secondString = secondString + " HLOAD TEMP "
				+ SymbolTable.maxTempNumber + " " + firstString + " 0 ";
		SymbolTable.maxTempNumber++;
		secondString = secondString + " CJUMP MINUS 1 LT TEMP "
				+ (SymbolTable.maxTempNumber - 2) + " TEMP "
				+ (SymbolTable.maxTempNumber - 1) + " L" + this.labelNumber;
		this.labelNumber++;

		secondString = secondString + " ERROR " + " L" + (this.labelNumber - 1)
				+ " NOOP RETURN TEMP " + (SymbolTable.maxTempNumber - 2)
				+ " END ";

		var = var + " HSTORE PLUS " + firstString + " PLUS " + secondString
				+ " 4 0 " + expression2;

		System.out.println(var);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
	 * "else" f6 -> Statement()
	 */
	public R visit(IfStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);

		String var = "";
		var = " CJUMP ";
		System.out.println(var);
		R ifexp = n.f2.accept(this);

		int elselabel = this.labelNumber;
		int breaklabel = this.labelNumber + 1;
		this.labelNumber += 2;
		var = (String) ifexp + " L" + elselabel;
		System.out.println(var);
		n.f3.accept(this);
		// ifstmnt
		n.f4.accept(this);

		var = " " + " JUMP L" + breaklabel;
		System.out.println(var);
		

		n.f5.accept(this);
		var = "";
		var = var + " L" + elselabel;
		System.out.println(var);

		// elsestmnt
		n.f6.accept(this);
		var = "";
		var = var + " " + " L" + breaklabel + " NOOP ";

		System.out.println(var);
		return (R) _ret;
	}

	/**
	 * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
	 */
	public R visit(WhileStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		String var = "";
		int looplabel = this.labelNumber;
		int breaklabel = this.labelNumber + 1;

		var = " L" + looplabel + " CJUMP ";
		System.out.println(var);
		this.labelNumber += 2;
		R exp = n.f2.accept(this);
		var = (String) exp + " L" + breaklabel;
		
		System.out.println(var);
		n.f3.accept(this);

		n.f4.accept(this);
		var = "";
		var = " JUMP L" + looplabel + " L" + breaklabel + " NOOP ";

		System.out.println(var);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
	 * ";"
	 */
	public R visit(PrintStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		R exp = n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);

		String var = " PRINT " + (String) exp + " ";
		System.out.println(var);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
	 * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
	 * MessageSend() | PrimaryExpression()
	 */
	public R visit(Expression n) {
		R _ret = null;
		_ret = n.f0.accept(this);

		String valOne = this.returnTempNumber((String) _ret);
		if (!valOne.equals(""))
			_ret = (R) valOne;

		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "&" f2 -> PrimaryExpression()
	 */

	public R visit(AndExpression n) {
		R exp1 = n.f0.accept(this);
		n.f1.accept(this);
		R exp2 = n.f2.accept(this);

		String valOne = this.returnTempNumber((String) exp1);
		if (!valOne.equals(""))
			exp1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) exp2);
		if (!valTwo.equals(""))
			exp2 = (R) valTwo;

		String var = "";
		var = var + " BEGIN MOVE TEMP " + SymbolTable.maxTempNumber
				+ " 0 CJUMP " + (String) exp1;
		var = var + " L" + this.labelNumber + " CJUMP " + (String) exp2 + " L"
				+ this.labelNumber;
		var = var + " MOVE TEMP " + SymbolTable.maxTempNumber + " 1 L"
				+ this.labelNumber + " NOOP RETURN ";
		var = var + " TEMP " + SymbolTable.maxTempNumber + " END ";

		SymbolTable.maxTempNumber++;
		this.labelNumber++;

		// System.out.println(var);
		return (R) (var + "\n");
	}

/**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
	public R visit(CompareExpression n) {

		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);

		String valOne = this.returnTempNumber((String) ret1);
		if (!valOne.equals(""))
			ret1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) ret2);
		if (!valTwo.equals(""))
			ret2 = (R) valTwo;

		String var = " LT " + ret1 + " " + ret2 + " ";
		return (R) (var + "\n");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
	 */
	public R visit(PlusExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);

		String valOne = this.returnTempNumber((String) ret1);
		if (!valOne.equals(""))
			ret1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) ret2);
		if (!valTwo.equals(""))
			ret2 = (R) valTwo;

		String var = " PLUS " + ret1 + " " + ret2 + " ";
		return (R) (var + "\n");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
	 */
	public R visit(MinusExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);

		String valOne = this.returnTempNumber((String) ret1);
		if (!valOne.equals(""))
			ret1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) ret2);
		if (!valTwo.equals(""))
			ret2 = (R) valTwo;

		String var = " MINUS " + ret1 + " " + ret2 + " ";
		return (R) (var + "\n");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
	 */
	public R visit(TimesExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);

		String valOne = this.returnTempNumber((String) ret1);
		if (!valOne.equals(""))
			ret1 = (R) valOne;
		String valTwo = this.returnTempNumber((String) ret2);
		if (!valTwo.equals(""))
			ret2 = (R) valTwo;

		String var = " TIMES " + ret1 + " " + ret2 + " ";
		return (R) (var + "\n");

	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
	 */
	public R visit(ArrayLookup n) {
		R identifier = n.f0.accept(this);
		n.f1.accept(this);
		R expression1 = n.f2.accept(this);
		n.f3.accept(this);

		String var = "";
		String firstString = "";
		String secondString = "";
		int offset = 0;

		String valOne = this.returnTempNumber((String) expression1);
		if (!valOne.equals(""))
			expression1 = (R) valOne;

		String hashString;
		hashString = symt.hashString("variable", (String) identifier,
				SymbolTable.currentClass, null);

		if (SymbolTable.mainTable.containsKey(hashString)) {

			ArrayList<Object> V = (ArrayList<Object>) this.tempTable.get(0);
			offset = 4;
			for (Object o : V) {
				if (o instanceof String)
					continue;
				VariableClass v = (VariableClass) o;
				if (v.name.equals((String) identifier)) {
					break;
				}
				offset += 4;

			}

			firstString = firstString + " BEGIN HLOAD TEMP "
					+ SymbolTable.maxTempNumber + " TEMP 0 " + offset;
			firstString = firstString + " RETURN TEMP "
					+ SymbolTable.maxTempNumber + " END ";

			SymbolTable.maxTempNumber++;
		}

		hashString = symt.hashString("variable", (String) identifier,
				SymbolTable.currentClass, SymbolTable.currentFunction);

		if (SymbolTable.mainTable.containsKey(hashString)) {
			VariableClass V = (VariableClass) symt.query(hashString);
			firstString = firstString + " BEGIN MOVE TEMP "
					+ SymbolTable.maxTempNumber + " " + V.tempNumber;
			firstString = firstString + " RETURN TEMP "
					+ SymbolTable.maxTempNumber + " END ";

			SymbolTable.maxTempNumber++;
		}

		secondString = secondString + " BEGIN " + " MOVE TEMP "
				+ SymbolTable.maxTempNumber + " TIMES ";
		SymbolTable.maxTempNumber++;
		secondString = secondString + expression1 + " 4 ";
		secondString = secondString + " HLOAD TEMP "
				+ SymbolTable.maxTempNumber + " " + firstString + " 0 ";
		SymbolTable.maxTempNumber++;
		secondString = secondString + " CJUMP MINUS 1 LT TEMP "
				+ (SymbolTable.maxTempNumber - 2) + " TEMP "
				+ (SymbolTable.maxTempNumber - 1) + " L" + this.labelNumber;
		this.labelNumber++;

		secondString = secondString + " ERROR " + " L" + (this.labelNumber - 1)
				+ " NOOP RETURN TEMP " + (SymbolTable.maxTempNumber - 2)
				+ " END ";

		var = var + " BEGIN HLOAD TEMP " + SymbolTable.maxTempNumber + " PLUS "
				+ firstString + " PLUS " + secondString + " 4 0 RETURN TEMP "
				+ SymbolTable.maxTempNumber + " END ";
		SymbolTable.maxTempNumber++;

		return (R) (var + "\n");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
	 */
	public R visit(ArrayLength n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);

		String exp = (String) _ret;
		String hashString = symt.hashString("variable", exp,
				SymbolTable.currentClass, SymbolTable.currentFunction);
		String var = "";
		int sizeLocation = 0;
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Function variable
			VariableClass V = (VariableClass) symt.query(hashString);
			sizeLocation = V.tempNumber;

		}
		hashString = symt.hashString("variable", exp, SymbolTable.currentClass,
				SymbolTable.currentFunction);
		if (SymbolTable.mainTable.containsKey(hashString)) {
			// Class Variable
			VariableClass V = (VariableClass) symt.query(hashString);
			sizeLocation = V.locationOfSize;

		}
		var = var + " " + (this.tempTable.get(sizeLocation)) + " ";
		return (R) (var + "\n");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> (
	 * ExpressionList() )? f5 -> ")"
	 */
	public R visit(MessageSend n) {
		int classTemp = SymbolTable.maxTempNumber;
		SymbolTable.maxTempNumber++;
		String var = " CALL ";
		var = var + " BEGIN ";
		var = var + " MOVE TEMP " + classTemp + " ";
		R primExp = n.f0.accept(this);

		String hashString = symt.hashString("variable", (String) primExp,
				SymbolTable.currentClass, SymbolTable.currentFunction);
		if (SymbolTable.mainTable.containsKey(hashString)) {
			primExp = (R) this.returnTempNumber((String) primExp);
		} else {
			hashString = symt.hashString("variable", (String) primExp,
					SymbolTable.currentClass, null);
			if (SymbolTable.mainTable.containsKey(hashString)) {

				primExp = (R) this.returnTempNumber((String) primExp);
			}
		}

		var = var + (String) primExp;
		String returnNumber;

		// Brute it out!

		try {
			int size = ((String) primExp).split("RETURN").length;
			returnNumber = ((String) primExp).split("RETURN")[size - 1]
					.split("\\s+")[2];
		} catch (Exception e) {
			returnNumber = ((String) primExp).split("\\s+")[2];
		}
		int retNum = Integer.parseInt(returnNumber);

		n.f1.accept(this);

		R iden = n.f2.accept(this);

		var = var + " HLOAD TEMP " + SymbolTable.maxTempNumber + " TEMP "
				+ classTemp + " 0 ";
		SymbolTable.maxTempNumber++;
		int offset = 0;

		Object o = this.tempTable.get(retNum);
		ArrayList<Object> V = (ArrayList<Object>) o;
		String funcTable = (String) V.get(0);
		int func = Integer.parseInt(funcTable.split("\\s+")[1]);
		Object o2 = this.tempTable.get(func);
		ArrayList<FunctionClass> F = (ArrayList<FunctionClass>) o2;

		for (FunctionClass Fun : F) {
			if (Fun.name.equals(iden)) {

				break;
			}
			offset += 4;
		}

		var = var + " HLOAD TEMP " + SymbolTable.maxTempNumber + " TEMP "
				+ (SymbolTable.maxTempNumber - 1) + " " + offset + " ";
		SymbolTable.maxTempNumber++;

		n.f3.accept(this);

		R params = n.f4.accept(this);
		if (params == null)
			params = (R) "";
		var = var + " RETURN TEMP " + (SymbolTable.maxTempNumber - 1) + " END ";
		var = var + " ( TEMP " + classTemp + " " + params + " ) ";
		n.f5.accept(this);
		// System.out.println(var);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> Expression() f1 -> ( ExpressionRest() )*
	 */
	public R visit(ExpressionList n) {
		params = "";
		R ret1 = n.f0.accept(this);
		R ret2 = n.f1.accept(this);
		// System.out.println(ret1);
		params = (String) ret1 + " " + params;
		return (R) params;
	}

	/**
	 * f0 -> "," f1 -> Expression()
	 */
	public R visit(ExpressionRest n) {
		n.f0.accept(this);
		R ret1 = n.f1.accept(this);
		params = params + " " + (String) ret1;
		return (R) params;
	}

	/**
	 * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
	 * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
	 * NotExpression() | BracketExpression()
	 */
	public R visit(PrimaryExpression n) {
		R _ret = null;
		_ret = (R) n.f0.accept(this);

		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		n.f0.accept(this);
		return (R) (" " + n.f0.tokenImage + " ");
	}

	/**
	 * f0 -> "true"
	 */
	public R visit(TrueLiteral n) {
		n.f0.accept(this);
		return (R) " 1 ";
	}

	/**
	 * f0 -> "false"
	 */
	public R visit(FalseLiteral n) {
		n.f0.accept(this);
		return (R) " 0 ";
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Identifier n) {
		n.f0.accept(this);
		String identifier = n.f0.tokenImage;
		return (R) identifier;
	}

	/**
	 * f0 -> "this"
	 */

	public R visit(ThisExpression n) {
		n.f0.accept(this);
		String var = " TEMP 0 ";
		return (R) (var + "\n");
	}

	/**
	 * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
	 */
	public R visit(ArrayAllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		_ret = n.f3.accept(this);
		int currentMax = SymbolTable.maxTempNumber;
		SymbolTable.maxTempNumber++;
		String var = " BEGIN ";

		String exp = (String) _ret;
		String hashString = symt.hashString("variable", exp,
				SymbolTable.currentClass, SymbolTable.currentFunction);

		if (SymbolTable.mainTable.containsKey(hashString)) {
			VariableClass V = (VariableClass) symt.query(hashString);
			exp = " TEMP " + V.tempNumber;

		}
		hashString = symt.hashString("variable", exp, SymbolTable.currentClass,
				null);

		if (SymbolTable.mainTable.containsKey(hashString)) {
			ArrayList<Object> VariableTable = (ArrayList<Object>) tempTable
					.get(0);
			int offset = 4;
			for (Object o : VariableTable) {
				if (o instanceof String)
					continue;

				VariableClass objToVar = (VariableClass) o;
				if (objToVar.name.equals(exp)) {

					break;
				}

				offset += 4;
			}
			var = var + " HLOAD TEMP " + SymbolTable.maxTempNumber + " TEMP 0 "
					+ offset;
			exp = " TEMP " + SymbolTable.maxTempNumber;
			SymbolTable.maxTempNumber++;
		}
		var = var + " MOVE TEMP " + currentMax + " ";
		var = var + " HALLOCATE TIMES PLUS " + exp + " 1 4 ";

		this.tempTable.put(currentMax, exp);

		var = var + " MOVE TEMP " + SymbolTable.maxTempNumber + " 4 ";
		var = var + " L" + this.labelNumber + " CJUMP  LT TEMP "
				+ SymbolTable.maxTempNumber;
		var = var + " TIMES  PLUS " + exp + " 1  4 L" + (this.labelNumber + 1);
		var = var + " HSTORE  PLUS TEMP " + (SymbolTable.maxTempNumber - 1)
				+ " TEMP " + (SymbolTable.maxTempNumber);
		var = var + " 0  0 ";
		var = var + " MOVE TEMP " + SymbolTable.maxTempNumber + " PLUS TEMP "
				+ SymbolTable.maxTempNumber + " 4 ";
		var = var + " JUMP L" + this.labelNumber + " L"
				+ (this.labelNumber + 1) + " HSTORE TEMP "
				+ (SymbolTable.maxTempNumber - 1);
		var = var + " 0  TIMES " + exp + " 4 ";

		var = var + " RETURN " + " TEMP " + currentMax;
		var = var + " END ";
		// System.out.println(var);
		n.f4.accept(this);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
	 */

	public R visit(AllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);

		// Begin printed
		String var = "BEGIN \n";

		ArrayList<Object> varTable = new ArrayList<Object>();
		ArrayList<FunctionClass> funcTable = new ArrayList<FunctionClass>();

		ArrayList<FunctionClass> func = this.getFunctions((String) _ret);
		ArrayList<VariableClass> vars = this.getVariables((String) _ret);

		funcTable.addAll(func);
		tempTable.put(SymbolTable.maxTempNumber, funcTable);

		// Allocating space for function table
		var = var + " MOVE TEMP " + SymbolTable.maxTempNumber + " HALLOCATE "
				+ func.size() * 4;

		varTable.add("TEMP " + SymbolTable.maxTempNumber);

		varTable.addAll(vars);
		SymbolTable.maxTempNumber++;

		tempTable.put(SymbolTable.maxTempNumber, varTable);

		// Allocating space for Variable table
		var = var + "\n MOVE TEMP " + SymbolTable.maxTempNumber + " HALLOCATE "
				+ (vars.size() + 1) * 4;
		SymbolTable.maxTempNumber++;

		int count = 0;
		// Store all the function values in the corresponding offset
		for (FunctionClass f : func) {
			var = var + " HSTORE TEMP " + (SymbolTable.maxTempNumber - 2) + " "
					+ count + " " + (String) _ret + "_" + f.name;
			count = count + 4;
		}

		// Point the first of variable table list to function table list
		var = var + " HSTORE TEMP " + (SymbolTable.maxTempNumber - 1) + " 0 "
				+ "TEMP " + (SymbolTable.maxTempNumber - 2);
		count = 4;

		// Store all the variables in the variable table list
		for (VariableClass V : vars) {
			var = var + " HSTORE TEMP " + (SymbolTable.maxTempNumber - 1) + " "
					+ count + " 0 ";
			count = count + 4;
		}

		var = var + " RETURN TEMP " + (SymbolTable.maxTempNumber - 1);
		var = var + " END ";
		// System.out.println(var);
		n.f2.accept(this);
		n.f3.accept(this);
		return (R) (var + "\n");
	}

	/**
	 * f0 -> "!" f1 -> Expression()
	 */
	public R visit(NotExpression n) {

		n.f0.accept(this);
		R ret = n.f1.accept(this);
		String str = " MINUS 1 " + (String) ret + " ";
		return (R) (str + "\n");
	}

	/**
	 * f0 -> "(" f1 -> Expression() f2 -> ")"
	 */
	public R visit(BracketExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) n.f1.accept(this);
		n.f2.accept(this);

		return _ret;
	}

}
