//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {

	int tempcount = 30;
	int labelc = 1;
	public String ansexp = new String();
	//public String stat = new String();
	//public String stat1 = new String();
	//public String type1 = new String();
	symboltable table = new symboltable();
	symboltable1 temptable = new symboltable1();
	ArrayList<String> nodes = new ArrayList();
	ArrayList<String> edges = new ArrayList();
	public ArrayList<String> actualparams;

	public GJNoArguDepthFirst(symboltable table, ArrayList<String> nodes,
			ArrayList<String> edges) {
		this.table = table;
		this.nodes = nodes;
		this.edges = edges;
	}

	public String ret_tempno(String name) {
		String ans = " TEMP  ";
		
		name = name.replaceAll("\\s+", "");

		String key = table.add_delim(table.curr_class, table.curr_function,
				name);
		if (table.symtable.containsKey(key)) {
			Object obj = table.query(key);
			if (obj instanceof variableclass) {
				if(((variableclass) obj).type=="int[]")
				{
					ans = ans + ((Integer) ((variableclass) obj).artempno).toString();
				}
				else
				/*{
					if( (!(((variableclass)obj).type=="int")) && (!(((variableclass)obj).type=="boolean")) )
					{
						ans = ans + ((Integer) ((variableclass) obj).objtempno).toString();
						
					}
					else
				*/
				{
				ans = ans + ((Integer) ((variableclass) obj).tempno).toString();
				}
				//}
				return ans;
			}
		} else {

			key = table.add_delim(table.curr_class, null, name);
			
			ArrayList<String> o = (ArrayList<String>) temptable.query("0");
			
			int off, flag = 1, i = 0;
			if (!(o == null)) {
				while (flag == 1 && i < o.size()) {
					if (o.get(i).equals(name)) {
						flag = 0;
						
							
						
					}
					i++;
				}
				if (flag == 0) {
					i = i - 1;
					off = i * 4;
					
					//ans = ans + " 0 " + ((Integer) off).toString();
					int t7;
					table.totaltemps++;
					t7 = table.totaltemps;
					ans = "";
					ans = ans + " BEGIN \n HLOAD TEMP " + t7 + " TEMP 0 " + off + "\n RETURN \n TEMP "+t7 +"\n END \n";
					
					//if (name.equals("size"))
						//System.out.println(ans);
					//if(name.equals("number"))
					//	System.out.println("hi " + ans);
					return ans;
				} 
			} 
			//return "";
		}
		return "";
	}

	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public R visit(NodeList n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
	 */
	public R visit(Goal n) {
		R _ret = null;
		String ans = (String) n.f0.accept(this);
		// System.out.println(n.f0.f0.tokenImage);
		// System.out.println(n.f0.f1.f0.tokenImage);

		n.f1.accept(this);
		//ans = ans + type1;
		n.f2.accept(this);
		 //System.out.println(ans);
		return (R) ans;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
	 * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
	 * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
	 * "}" f16 -> "}"
	 */
	public R visit(MainClass n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		String ans = " MAIN \n";
		System.out.println(ans);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		n.f14.accept(this);
		n.f15.accept(this);
		n.f16.accept(this);
		ans = "\n END ";
		System.out.println(ans);
		return (R) _ret;
	}

	/**
	 * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
	 */
	public R visit(TypeDeclaration n) {
		R _ret = null;
		if (n.f0.which == 0) {
			String key = ((ClassDeclaration) n.f0.choice).f1.f0.tokenImage;
			table.curr_class = key;
			table.curr_function = null;
			String cname = table.curr_class;
			ArrayList<String> funcnames = new ArrayList<String>();
			funcnames = table.listOfFunctions(cname);
			ArrayList<String> varnames = new ArrayList<String>();
			varnames = table.listOfvariables(cname);
			ArrayList<String> varnames1 = new ArrayList<String>();
			varnames1.add("20");
			varnames1.addAll(varnames);
			temptable.insert("0", varnames1);
			temptable.insert("20", funcnames);

		}
		if (n.f0.which == 1) {
			String key = ((ClassDeclaration) n.f0.choice).f1.f0.tokenImage;
			table.curr_class = key;
			table.curr_function = null;
			String cname = table.curr_class;
			ArrayList<String> funcnames = new ArrayList<String>();
			funcnames = table.listOfFunctions(cname);
			ArrayList<String> varnames = new ArrayList<String>();
			varnames = table.listOfvariables(cname);
			ArrayList<String> varnames1 = new ArrayList<String>();
			varnames1.add("20");
			varnames1.addAll(varnames);
			temptable.insert("0", varnames1);
			temptable.insert("20", funcnames);

		}
		//type1 = "";
		n.f0.accept(this);

		//type1 = type1 + _ret;
		// System.out.println((String)_ret);
		return (R) _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4
	 * -> ( MethodDeclaration() )* f5 -> "}"
	 */
	public R visit(ClassDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		return (R) _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
	 * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
	 */
	public R visit(ClassExtendsDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		return (R) _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier() f2 -> ";"
	 */
	public R visit(VarDeclaration n) {
		R _ret = null;
		n.f0.accept(this);

		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> (
	 * FormalParameterList() )? f5 -> ")" f6 -> "{" f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )* f9 -> "return" f10 -> Expression() f11 -> ";" f12
	 * -> "}"
	 */
	public R visit(MethodDeclaration n) {
		R _ret = null;

		// n.f2.f0.tokenImage;

		//stat = "";

		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		String key = n.f2.f0.tokenImage;
		table.curr_function = key;

		key = table.add_delim(table.curr_class, n.f2.f0.tokenImage,
				n.f2.f0.tokenImage);
		functionclass obj = (functionclass) table.query(key);
		int ans = obj.formalparameters.size() + 1;
		String ret = table.curr_class + "_" + n.f2.f0.tokenImage + "   [ "
				+ ans + " ] ";
		ret = ret + "\n BEGIN \n";
		System.out.println(ret);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		String gen = (String) n.f8.accept(this);
		//ret = ret + stat;
		// System.out.println(gen);
		ret = "\n RETURN \n";
		System.out.println(ret);
		n.f9.accept(this);
		ret = (String) n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		ret = ret + " END \n";
		//stat1 = stat1 + ret;
		 System.out.println(ret);
		return (R) _ret;
	}

	/**
	 * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
	 */
	public R visit(FormalParameterList n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier()
	 */
	public R visit(FormalParameter n) {
		R _ret = null;
		n.f0.accept(this);
		// System.out.println(ff0);
		String ff1 = (String) n.f1.accept(this);
		String key = table
				.add_delim(table.curr_class, table.curr_function, ff1);
		if (table.symtable.containsKey(key)) {
			Object obj = table.query(key);
			String type;
			int tnum;
			if (obj instanceof variableclass) {
				type = ((variableclass) obj).type;
				tnum = ((variableclass) obj).tempno;
				if (type.equals("int[]")) {
					// identifier is a formal parameter with type array

					// table.totaltemps++;
					;

				} else {
					key = table.add_delim(type, null, type);
					if (table.symtable.containsKey(key)) {
						// then the identifier is an object with type as a class
						// type
						//

						String cname = type;
						key = (String) _ret + "!" + null + "@" + (String) _ret;

						ArrayList<String> funcnames = new ArrayList<String>();
						funcnames = table.listOfFunctions(cname);
						ArrayList<String> varnames = new ArrayList<String>();
						varnames = table.listOfvariables(cname);
						int i, falloc, varalloc, tabtemp1, tabtemp2, j;
						falloc = funcnames.size() * 4;
						varalloc = varnames.size() * 4 + 4;

						// increment totaltemps before u want to create a new
						// one
						// table.totaltemps++;
						tabtemp1 = tnum * (-10);
						String key1 = ((Integer) tabtemp1).toString();
						temptable.insert(key1, funcnames);

						// table.totaltemps++;
						tabtemp2 = tnum;

						for (i = 0; i < funcnames.size(); i++) {
							key = table.add_delim(cname, funcnames.get(i),
									funcnames.get(i));
							Object obj1 = table.query(key);

							if (obj1 instanceof functionclass) {
								((functionclass) obj1).offset = i;
								table.insert(key, obj1);
								j = i * 4;

							}

						}

						for (i = 0; i < varnames.size(); i++) {
							key = table.add_delim(cname, varnames.get(i),
									varnames.get(i));
							Object obj1 = table.query(key);
							// System.out.println(cname);
							if (obj1 instanceof variableclass) {
								((variableclass) obj1).offset = i;
								((variableclass) obj1).tempno = -1;
								table.insert(key, obj1);
								j = i + 1;
								j = j * 4;
							}

						}

						String key2 = ((Integer) tabtemp2).toString();
						ArrayList<String> varnames1 = new ArrayList<String>();
						varnames1.add(key1);
						varnames1.addAll(varnames);
						temptable.insert(key2, varnames1);

					}
				}

			}

		}

		return _ret;
	}

	/**
	 * f0 -> "," f1 -> FormalParameter()
	 */
	public R visit(FormalParameterRest n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
	 */
	public R visit(Type n) {
		R _ret = null;

		n.f0.accept(this);

		// System.out.println(a);
		return _ret;
	}

	/**
	 * f0 -> "int" f1 -> "[" f2 -> "]"
	 */
	public R visit(ArrayType n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		// _ret = (R) "int[]";
		return (R) "int[]";
	}

	/**
	 * f0 -> "boolean"
	 */
	public R visit(BooleanType n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) "boolean";
	}

	/**
	 * f0 -> "int"
	 */
	public R visit(IntegerType n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) "int";
	}

	/**
	 * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
	 * IfStatement() | WhileStatement() | PrintStatement()
	 */
	public R visit(Statement n) {
		R _ret = null;

		// stat = "";
		n.f0.accept(this);
		
		// System.out.println(stat);
		return (R) _ret;
	}

	/**
	 * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
	 */
	public R visit(Block n) {
		R _ret = null;
		n.f0.accept(this);

		n.f1.accept(this);
		// stat = _ret + stat;
		n.f2.accept(this);
		return (R) _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
	 */
	public R visit(AssignmentStatement n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		String ans = "";
		String key = table
				.add_delim(table.curr_class, table.curr_function, ff0);
		int tnum;
		n.f1.accept(this);
		String exp = (String) n.f2.accept(this);
		String TNUM;

		if (table.symtable.containsKey(key)) {
			// function variable
			Object obj = table.query(key);

			tnum = ((variableclass) obj).tempno;
			ans = ans + " MOVE TEMP " + tnum;
			//array type
			if (((variableclass) obj).type.equals("int[]")) {
				int size = exp.split("RETURN").length;
				TNUM = exp.split("RETURN")[size - 1].split("END")[0];
				//System.out.println(TNUM);
				TNUM = TNUM.split("\\s+")[2];
				((variableclass) obj).artempno = Integer.parseInt(TNUM);
				table.insert(key, obj);

			}
			else
			{;
			}
		}
			/*else
			{
				//class object
				if ((!((variableclass) obj).type.equals("int")) && (!((variableclass) obj).type.equals("boolean")))
				{
					int size = exp.split("RETURN").length;
					TNUM = exp.split("RETURN")[size - 1].split("END")[0];
					//System.out.println(TNUM);
					TNUM = TNUM.split("\\s+")[2];
					((variableclass) obj).objtempno = Integer.parseInt(TNUM);
					table.insert(key, obj);
				}
			}
			
			//normal variable is default
		}*/ else {
			key = table.add_delim(table.curr_class, null, ff0);
			if (table.symtable.containsKey(key)) {
				// class variable
				Object obj1 = table.query(key);
				ArrayList<String> obj2 = (ArrayList<String>) temptable
						.query("0");
				int off = 4;
				int i = 1, flag = 1;
				// System.out.println(obj);
				while (flag == 1) {
					if (obj2.get(i).equals(ff0)) {
						flag = 0;

					}
					i++;
				}
				off = 4 * i - 4;
				ans = ans + " HSTORE TEMP 0 " + off;
				if (((variableclass) obj1).type.equals("int[]")) {
					int size = exp.split("RETURN").length;
					TNUM = exp.split("RETURN")[size - 1].split("END")[0]
							.split("\\s+")[2];
					TNUM = TNUM.replaceAll(" ", "");
					((variableclass) obj1).artempno = Integer.parseInt(TNUM);
					// System.out.println(TNUM + "hhhhhhhhhhhhhhh");
					table.insert(key, obj1);

				}
			}

		}

		ans = ans + " " + exp + "\n";

		 System.out.println(ans);
		n.f3.accept(this);
		
		return (R) _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 ->
	 * Expression() f6 -> ";"
	 */
	public R visit(ArrayAssignmentStatement n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		// use hstore
		ff0 = ff0.replaceAll(" ", "");
		n.f1.accept(this);
		String first = (String) n.f2.accept(this);

		n.f3.accept(this);
		n.f4.accept(this);
		String second = (String) n.f5.accept(this);
		String ff2 = ret_tempno(first);
		if (ff2.equals("")) {
			ff2 = first;
		}
		String ff5 = ret_tempno(second);
		if (ff5.equals("")) {
			ff5 = second;
		}
		// System.out.println(ff5);
		n.f6.accept(this);
		String ans = "HSTORE \n PLUS \n";
		// F1
		String F1 = "";
		F1 = F1 + " BEGIN \n";
		int t1, offs = 0;
		table.totaltemps++;
		t1 = table.totaltemps;

		String key = table.add_delim(table.curr_class, null, ff0);
		if (table.symtable.containsKey(key)) {
			String key1 = "0";
			ArrayList<String> o = (ArrayList<String>) temptable.query(key1);
			int flag = 1, i = 0;
			while (flag == 1) {
				if (o.get(i).equals(ff0)) {
					flag = 0;
				}
				i++;
			}
			i = i - 1;
			offs = i * 4;
			F1 = F1 + " HLOAD TEMP " + t1 + " TEMP 0 " + offs + " \n";

		} else {
			key = table.add_delim(table.curr_class, table.curr_function, ff0);
			if (table.symtable.containsKey(key)) {
				Object obj1 = table.query(key);
				offs = ((variableclass) obj1).tempno;
				F1 = F1 + " MOVE TEMP " + t1 + offs + " \n";
			}

		}
		F1 = F1 + " RETURN  TEMP " + t1 + " \n END \n";
		//F1 = F1 + " PLUS \n";
		ans = ans + F1 + " PLUS \n";
		// F2
		table.totaltemps++;
		int t2 = table.totaltemps;
		ans = ans + " BEGIN \n" + " MOVE TEMP " + t2 + " TIMES 4 " + ff2 + "\n";
		table.totaltemps++;
		int t3 = table.totaltemps;
		ans = ans + " HLOAD TEMP " + t3 + "\n";
		ans = ans + F1 + " 0 \n";
		int l1 = labelc;
		labelc++;
		ans = ans + " CJUMP MINUS 1 LT TEMP " + t2 + " TEMP " + t3 + " LABEL"
				+ l1 + " \n";
		ans = ans + " ERROR \n";
		ans = ans + " LABEL" + l1 + " NOOP \n";
		ans = ans + " RETURN \n " + "TEMP " + t2 + "\n END \n";
		// F2 over
		ans = ans + " 4 \n";
		ans = ans + " 0 " + ff5 + "\n";

		System.out.println(ans);
		return (R) _ret;
	}

	/**
	 * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
	 * "else" f6 -> Statement()
	 */
	public R visit(IfStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		String ans = " CJUMP ";
		ans = ans + (String) n.f2.accept(this);
		int l1 = labelc;
		labelc++;
		int l2 = labelc;
		labelc++;
		ans = ans + "LABEL" + l1 + "\n";
		System.out.println(ans);
		n.f3.accept(this);
		ans = (String) n.f4.accept(this);
		
		ans = "";
		ans = ans + "  JUMP " + "LABEL" + l2 + "\n";
		ans = ans + "LABEL" + l1;
		System.out.println(ans);
		n.f5.accept(this);
		ans = (String) n.f6.accept(this);
		ans = "\n";
		ans = ans + "LABEL" + l2;
		ans = ans + " NOOP \n";
		 System.out.println(ans);
		return (R) _ret;
	}

	/**
	 * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
	 */
	public R visit(WhileStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);

		String ans = "  ";
		int l1 = labelc;
		labelc++;
		ans = ans + "LABEL" + l1 + " CJUMP ";

		ans = ans + (String) n.f2.accept(this);
		n.f3.accept(this);
		int l2 = labelc;
		labelc++;
		ans = ans + "LABEL" + l2 + "\n";
		System.out.println(ans);
		ans = (String) n.f4.accept(this) + "\n";
		ans = " JUMP " + "LABEL" + l1 + "\n";
		ans = ans + "LABEL" + l2 + " NOOP  \n";
		 System.out.println(ans);
		return (R) _ret;
	}

	/**
	 * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
	 * ";"
	 */
	public R visit(PrintStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		// System.out.print("PRINT ");
		String ans = " PRINT " + n.f2.accept(this);

		n.f3.accept(this);
		n.f4.accept(this);
		System.out.println(ans);
		return (R) _ret;
	}

	/**
	 * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
	 * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
	 * MessageSend() | PrimaryExpression()
	 */
	public R visit(Expression n) {
		R _ret = null;

		String val = (String) n.f0.accept(this);
		if (ret_tempno(val) == "") {
			_ret = (R) val;
		} else {
			_ret = (R) ret_tempno(val);
		}
		// System.out.println(_ret);
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "&" f2 -> PrimaryExpression()
	 */
	public R visit(AndExpression n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		n.f1.accept(this);
		String ff2 = (String) n.f2.accept(this);
		String ansff0 = ret_tempno(ff0);
		if (ansff0.equals("")) {
			ansff0 = ff0;
		}
		String ansff2 = ret_tempno(ff2);
		if (ansff2.equals("")) {
			ansff2 = ff2;
		}
		String ans = " BEGIN \n MOVE TEMP ";
		table.totaltemps++;
		int t1 = table.totaltemps;
		ans = ans + t1 + " 0 \n";
		labelc++;
		int l1 = labelc;
		ans = ans + " CJUMP " + ansff0 + " LABEL" + l1 + " \n";
		ans = ans + " CJUMP " + ansff2 + " LABEL" + l1 + " \n";
		ans = ans + "MOVE TEMP " + t1 + " 1 \n";
		ans = ans + " LABEL" + l1 + " NOOP \n";
		ans = ans + "RETURN TEMP " + t1 + "\n";
		ans = ans + " END \n";

		// System.out.println(ans);
		return (R) ans;
	}

/**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
	public R visit(CompareExpression n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		n.f1.accept(this);
		String ff2 = (String) n.f2.accept(this);
		String ansff0 = ret_tempno(ff0);
		if (ansff0.equals("")) {
			ansff0 = ff0;
		}
		String ansff2 = ret_tempno(ff2);
		if (ansff2.equals("")) {
			ansff2 = ff2;
		}
		String ans = " LT " + ansff0 + ansff2;
		// System.out.println(ans);
		return (R) ans;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
	 */
	public R visit(PlusExpression n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		n.f1.accept(this);
		String ff2 = (String) n.f2.accept(this);
		String ansff0 = ret_tempno(ff0);
		if (ansff0.equals("")) {
			ansff0 = ff0;
		}
		String ansff2 = ret_tempno(ff2);
		if (ansff2.equals("")) {
			ansff2 = ff2;
		}
		String ans = " PLUS " + ansff0 + ansff2;
		// String ans = " PLUS " +ff0 + ff2;
		return (R) ans;

	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
	 */
	public R visit(MinusExpression n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		n.f1.accept(this);
		String ff2 = (String) n.f2.accept(this);
		String ansff0 = ret_tempno(ff0);
		if (ansff0.equals("")) {
			ansff0 = ff0;
		}
		String ansff2 = ret_tempno(ff2);
		if (ansff2.equals("")) {
			ansff2 = ff2;
		}
		String ans = " MINUS " + ansff0 + ansff2;
		return (R) ans;

	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
	 */
	public R visit(TimesExpression n) {
		R _ret = null;
		String ff0 = (String) n.f0.accept(this);
		n.f1.accept(this);
		String ff2 = (String) n.f2.accept(this);
		String ansff0 = ret_tempno(ff0);
		if (ansff0.equals("")) {
			ansff0 = ff0;
		}
		String ansff2 = ret_tempno(ff2);
		if (ansff2.equals("")) {
			ansff2 = ff2;
		}
		String ans = " TIMES " + ansff0 + ansff2;
		// System.out.println(ans);
		return (R) ans;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
	 */
	public R visit(ArrayLookup n) {
		R _ret = null;
		String first = (String) n.f0.accept(this);
		first = first.replaceAll("\\s+", "");
		//System.out.println("whyyy "+ first);
		n.f1.accept(this);
		String second = (String) n.f2.accept(this);

		String ff0 = ret_tempno(first);
		//System.out.println("hhhhhhhhhh" + ff0);
		if (ff0.equals("")) {
			ff0 = first.replaceAll("\\s+","");
		}
		String ff2 = ret_tempno(second);
		if (ff2.equals("")) {
			ff2 = second.replaceAll("\\s+", "");
		}
		n.f3.accept(this);
		String ans = "";
		int t4;
		table.totaltemps++;
		t4 = table.totaltemps;
		ans = ans + " BEGIN \n" + " HLOAD TEMP " + t4 + " PLUS \n";

		String F1 = "";
		F1 = F1 + " BEGIN \n";
		int t1, offs = 0;
		table.totaltemps++;
		t1 = table.totaltemps;
		
		String key = table.add_delim(table.curr_class, null, first);
		
		if (table.symtable.containsKey(key)) {
			
			String key1 = "0";
			ArrayList<String> o = (ArrayList<String>) temptable.query(key1);
			int flag = 1, i = 0;
			while (flag == 1) {
				if (o.get(i).equals(first)) {
					flag = 0;
				}
				i++;
			}
			i = i - 1;
			offs = i * 4;
			F1 = F1 + " HLOAD TEMP " + t1 + " TEMP 0 " + offs + " \n";

		} else {
			key = table.add_delim(table.curr_class, table.curr_function, ff0);
			if (table.symtable.containsKey(key)) {
				Object obj1 = table.query(key);
				offs = ((variableclass) obj1).tempno;
				F1 = F1 + " MOVE TEMP " + t1 + offs + " \n";
			}

		}
		F1 = F1 + " RETURN  TEMP " + t1 + " \n END \n";
		//F1 = F1 + " PLUS \n";
		ans = ans + F1 + " PLUS \n";

		// F2
		table.totaltemps++;
		int t2 = table.totaltemps;
		ans = ans + " BEGIN \n" + " MOVE TEMP " + t2 + " TIMES 4 " + ff2 + "\n";
		table.totaltemps++;
		int t3 = table.totaltemps;
		ans = ans + " HLOAD TEMP " + t3 + "\n";
		ans = ans + F1 + " 0 \n";
		int l1 = labelc;
		labelc++;
		ans = ans + " CJUMP MINUS 1 LT TEMP " + t2 + " TEMP " + t3 + " LABEL"
				+ l1 + " \n";
		ans = ans + " ERROR \n";
		ans = ans + " LABEL" + l1 + " NOOP \n";
		ans = ans + " RETURN \n " + "TEMP " + t2 + "\n END \n";
		// F2 over

		ans = ans + " 4  0 \n";
		ans = ans + " RETURN \n TEMP " + t4 + " \n " + " END \n";
		// System.out.println(ans);
		return (R) ans;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
	 */
	public R visit(ArrayLength n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		String ff0 = (String) _ret;
		String answer = null;
		String tnum = null;

		ff0 = ff0.replaceAll(" ", "");
		String key = table
				.add_delim(table.curr_class, table.curr_function, ff0);
		// System.out.println(key);
		if (table.symtable.containsKey(key)) {
			Object obj = table.query(key);
			if (obj instanceof variableclass) {
				tnum = ((Integer) ((variableclass) obj).tempno).toString();

			}
		} else {
			key = table.add_delim(table.curr_class, null, ff0);
			if (table.symtable.containsKey(key)) {
				// i.e the array is a class object
				Object obj = table.query(key);
				if (obj instanceof variableclass) {
					tnum = ((Integer) ((variableclass) obj).artempno)
							.toString();
				}
			}
		}
		// System.out.println(tnum);
		// go to tnum in temptable and get its value.
		String exp = (String) temptable.query(tnum);
		answer = answer + " " + exp;

		// System.out.println(answer);
		n.f1.accept(this);
		n.f2.accept(this);
		return (R) answer;
	}

	// to do
	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> (
	 * ExpressionList() )? f5 -> ")"
	 */
	public R visit(MessageSend n) {
		R _ret = null;

		String ans = "CALL \n";
		ans += "BEGIN \n";
		table.totaltemps++;
		int classtempnum = table.totaltemps;
		ans = ans + "MOVE TEMP " + classtempnum + " \n";
		String ff0 = (String) n.f0.accept(this);
		String key1 = ff0.replaceAll("\\s+","");
		
		
		//if ff0 is a class object and not a new exp()
		// then use that ret_tempno function
		String key = table.add_delim(table.curr_class, table.curr_function,key1);
		if(table.symtable.containsKey(key))
		{
			ff0 = ret_tempno(key1);
			//System.out.println("funcvar" + ff0);
		}
		else
		{
			key = table.add_delim(table.curr_class, null, key1);
			if(table.symtable.containsKey(key))
			{
				//global class variable
				ff0 = ret_tempno(key1);
				//System.out.println("classvar" + ff0);
			}
		}
		
		
		ans += ff0;
		String rettemp = null;
		try {
			int size = ff0.split("RETURN").length;
			rettemp = ff0.split("RETURN")[size - 1].split("END")[0];
			// System.out.println(rettemp);
			rettemp = rettemp.split("\\s+")[2];
			 //System.out.println("hey" + rettemp);
		} catch (Exception e) {
			//System.out.println("whyyyyyyy" + ff0);
			//rettemp = "73";
			//System.out.println("hi" + ff0);
			rettemp = ff0.split("\\s+")[2];
			
		}
		int classtempnumorig = Integer.parseInt(rettemp);

		n.f1.accept(this);

		String fname = (String) n.f2.accept(this);
		table.totaltemps++;
		int functempkey = table.totaltemps;
		ans = ans + " HLOAD TEMP " + functempkey + " TEMP " + classtempnum
				+ " 0 \n";
		table.totaltemps++;
		int funcnamevar = table.totaltemps, off = 0;
		ArrayList<String> obj = (ArrayList<String>) temptable.query(rettemp);
		
		key1 = obj.get(0);
		// find offset of fname within object of key1
		ArrayList<String> o = (ArrayList<String>) temptable.query(key1);
		int flag = 1, i = 0;
		while (flag == 1) {
			if (o.get(i).equals(fname)) {
				flag = 0;
			}
			i++;
		}
		i = i - 1;
		off = i * 4;
		ans = ans + " HLOAD TEMP " + funcnamevar + " TEMP " + functempkey + " "
				+ off + "\n";

		n.f3.accept(this);

		String exp = (String) n.f4.accept(this);
		if (exp == null) {
			exp = "";
		}
		n.f5.accept(this);

		ans = ans + "\n RETURN \n TEMP " + funcnamevar + " \n END\n";
		ans = ans + " ( " + "TEMP " + classtempnum + " " + exp + " ) \n";
		// System.out.println(ans);
		return (R) ans;
	}

	// to do
	// / next two are for function's actual params list which not yet done
	/**
	 * f0 -> Expression() f1 -> ( ExpressionRest() )*
	 */
	public R visit(ExpressionList n) {
		R _ret = null;
		// create a null arraylist of types
		ansexp = "";
		// add expression type to global array list
		n.f1.accept(this);
		ansexp = " " + (String) n.f0.accept(this) + ansexp;
		return (R) ansexp;
	}

	// to do
	/**
	 * f0 -> "," f1 -> Expression()
	 */
	public R visit(ExpressionRest n) {
		R _ret = null;
		n.f0.accept(this);
		String e2 = (String) n.f1.accept(this);
		ansexp = ansexp + e2;
		// add type once to array list
		return (R) e2;
	}

	/**
	 * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
	 * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
	 * NotExpression() | BracketExpression()
	 */
	public R visit(PrimaryExpression n) {
		R _ret = null;

		_ret = n.f0.accept(this);
		String ff0 = "  " + (String) _ret + "  ";

		return (R) ff0;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) n.f0.tokenImage;
	}

	/**
	 * f0 -> "true"
	 */
	public R visit(TrueLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) " 1 ";
	}

	/**
	 * f0 -> "false"
	 */
	public R visit(FalseLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) " 0 ";
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Identifier n) {
		R _ret = null;
		n.f0.accept(this);

		String key = n.f0.tokenImage;
		String ans = key;
		key = table.add_delim(table.curr_class, table.curr_function, key);
		Object o = table.query(key);
		return (R) ans;
		// i.e the name of the identifier string itself
	}

	/**
	 * f0 -> "this"
	 */
	public R visit(ThisExpression n) {
		R _ret = null;
		n.f0.accept(this);
		// _ret = (R) table.curr_class;
		_ret = (R) "TEMP 0";
		return _ret;
	}

	/**
	 * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
	 */
	public R visit(ArrayAllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		_ret = n.f3.accept(this);
		n.f4.accept(this);
		String ans = "BEGIN \n";
		table.totaltemps++;
		int fintemp = table.totaltemps;

		String par1 = (String) _ret;
		String tempbrack1, tempbrack = null;
		String par = par1.replace(" ", "");
		String key = table
				.add_delim(table.curr_class, table.curr_function, par);
		if (table.symtable.containsKey(key)) {
			Object obj = table.query(key);
			if (obj instanceof variableclass) {
				tempbrack = "TEMP "
						+ ((Integer) ((variableclass) obj).tempno).toString();
			}

		} else {
			key = table.add_delim(table.curr_class, null, par);
			// System.out.println(key);
			if (table.symtable.containsKey(key)) {
				// System.out.println("whyy??");
				ArrayList<String> obj = (ArrayList<String>) temptable
						.query("0");
				int off = 4;
				int i = 1, flag = 1;
				// System.out.println(obj);
				while (flag == 1) {
					if (obj.get(i).equals(par)) {
						flag = 0;

					}
					i++;
				}
				off = 4 * i - 4;

				table.totaltemps++;
				ans += "HLOAD TEMP " + ((Integer) table.totaltemps).toString()
						+ " TEMP 0 " + ((Integer) off).toString() + "\n";
				tempbrack = "TEMP " + ((Integer) table.totaltemps).toString();
			} else {
				tempbrack = par1;
			}

		}
		ans += "MOVE TEMP " + fintemp + " ";
		ans += " HALLOCATE TIMES PLUS " + tempbrack + " 1 4 ";
		temptable.insert(((Integer) fintemp).toString(), tempbrack);
		table.totaltemps++;
		int temtemp = table.totaltemps;		//temtemp is 92
		ans = ans + "MOVE TEMP "+ temtemp +" 4 \n"; 
		int l7,l8;
		l7 = labelc;
		labelc++;
		l8 = labelc;
		labelc++;
		
	ans = ans +	"LABEL"+l7 +" CJUMP  LT TEMP "+temtemp +" TIMES  PLUS "+ tempbrack +" 1  4 LABEL"+l8 +" \n"; 
	ans = ans +" HSTORE  PLUS TEMP "+fintemp +" TEMP "+temtemp +" 0  0 \n"; 
	ans = ans +" MOVE TEMP "+temtemp +" PLUS TEMP "+temtemp +" 4 \n"; 
		ans = ans + " JUMP LABEL"+l7 +" \n"; 
	ans = ans +" LABEL"+l8+" HSTORE TEMP "+fintemp +" 0  TIMES " + tempbrack +" 4 \n"; 
		
		
		
		
		
		ans += " RETURN TEMP  " + fintemp + "\n";
		ans += "END \n";
		// System.out.println(ans);
		return (R) ans;
	}

	// to do
	/**
	 * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
	 */
	public R visit(AllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);
		String cname = (String) _ret;
		String key = (String) _ret + "!" + null + "@" + (String) _ret;
		String ans = null;

		ans = "BEGIN \n";

		n.f2.accept(this);
		n.f3.accept(this);

		ArrayList<String> funcnames = new ArrayList<String>();
		funcnames = table.listOfFunctions(cname);
		ArrayList<String> varnames = new ArrayList<String>();
		varnames = table.listOfvariables(cname);
		int i, falloc, varalloc, tabtemp1, tabtemp2, j;
		falloc = funcnames.size() * 4;
		varalloc = varnames.size() * 4 + 4;

		// increment totaltemps before u want to create a new one
		table.totaltemps++;
		tabtemp1 = table.totaltemps;
		// System.out.println("MOVE TEMP  " + table.totaltemps + "  HALLOCATE  "
		// + falloc);
		ans = ans.concat("MOVE TEMP  " + table.totaltemps + "  HALLOCATE  "
				+ falloc + "\n");
		String key1 = ((Integer) tabtemp1).toString();
		temptable.insert(key1, funcnames);

		table.totaltemps++;
		tabtemp2 = table.totaltemps;
		// System.out.println("MOVE TEMP  " + table.totaltemps + "  HALLOCATE  "
		// + varalloc);
		ans = ans.concat("MOVE TEMP  " + table.totaltemps + "  HALLOCATE  "
				+ varalloc + "\n");

		for (i = 0; i < funcnames.size(); i++) {
			key = table.add_delim(cname, funcnames.get(i), funcnames.get(i));
			Object obj = table.query(key);
			// System.out.println(cname);
			if (obj instanceof functionclass) {
				((functionclass) obj).offset = i;
				table.insert(key, obj);
				j = i * 4;
				// System.out.println("HSTORE TEMP " + tabtemp1 + "  " + j +
				// "  "+ cname + "_"+ funcnames.get(i) );
				ans = ans.concat("HSTORE TEMP " + tabtemp1 + "  " + j + "  "
						+ cname + "_" + funcnames.get(i) + "\n");

			}

		}
		// System.out.println("HSTORE TEMP " + tabtemp2 + "  0  TEMP " +
		// tabtemp1 );
		ans = ans.concat("HSTORE TEMP " + tabtemp2 + "  0  TEMP " + tabtemp1
				+ "\n");
		// ans = ans + varnames;
		for (i = 0; i < varnames.size(); i++) {
			key = table.add_delim(cname, null, varnames.get(i));
			Object obj = table.query(key);
			// System.out.println(cname);
			if (obj instanceof variableclass) {
				((variableclass) obj).offset = i;
				((variableclass) obj).tempno = -1;
				table.insert(key, obj);
				j = i + 1;
				j = j * 4;
				// ans = ans + "hey";
				// System.out.println("HSTORE TEMP " + tabtemp2 + "  " + j +
				// "   0 " );
				ans = ans.concat("HSTORE TEMP " + tabtemp2 + "  " + j
						+ "   0 \n");
			}

		}
		/*
		 * System.out.println("RETURN"); System.out.println("TEMP " + tabtemp2);
		 * System.out.println("END");
		 */
		ans = ans.concat("RETURN \n TEMP  " + tabtemp2 + " \n  END \n");

		String key2 = ((Integer) tabtemp2).toString();
		ArrayList<String> varnames1 = new ArrayList<String>();
		varnames1.add(key1);
		varnames1.addAll(varnames);
		temptable.insert(key2, varnames1);
		// System.out.println(ans);
		return (R) ans;
	}

	/**
	 * f0 -> "!" f1 -> Expression()
	 */
	public R visit(NotExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);
		String str = "MINUS 1" + (String) _ret;

		return (R) (str);
	}

	/**
	 * f0 -> "(" f1 -> Expression() f2 -> ")"
	 */
	public R visit(BracketExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

}
