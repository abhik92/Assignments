//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	static int tempNumber = 1000;
	static boolean function = false;

	public R visit(NodeList n) {
		R _ret = null;
		int _count = 0;

		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {

		if (n.present()) {
			R _ret = null;
			String var = "";
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				var = var + e.nextElement().accept(this);
				_count++;
			}
			_ret = (R) var;
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present()) {

			return n.node.accept(this);
		} else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> "MAIN" f1 -> StmtList() f2 -> "END" f3 -> ( Procedure() )* f4 ->
	 * <EOF>
	 */
	// production 1
	public R visit(Goal n) {
		R _ret = null;
		n.f0.accept(this);
		System.out.println(" MAIN ");
		System.out.println(n.f1.accept(this));
		n.f2.accept(this);
		System.out.println(" END ");
		n.f3.accept(this);
		Vector<Node> nodes = n.f3.nodes;

		String var = "";
		for (Node N : nodes) {
			_ret = N.accept(this);
			System.out.println(_ret);

		}
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	// production 2
	public R visit(StmtList n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Label() f1 -> "[" f2 -> IntegerLiteral() f3 -> "]" f4 -> StmtExp()
	 */
	// production 3
	public R visit(Procedure n) {
		R _ret = null;
		R lab = n.f0.accept(this);
		n.f1.accept(this);
		R intl = n.f2.accept(this);
		n.f3.accept(this);
		function = true;
		R smtexp = n.f4.accept(this);

		_ret = (R) (lab + " [ " + intl + " ] " + smtexp);
		return _ret;
	}

	/**
	 * f0 -> NoOpStmt() | ErrorStmt() | CJumpStmt() | JumpStmt() | HStoreStmt()
	 * | HLoadStmt() | MoveStmt() | PrintStmt()
	 */
	// production 4
	public R visit(Stmt n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		// System.out.println(_ret);
		return _ret;
	}

	/**
	 * f0 -> "NOOP"
	 */
	// prodcution 5
	public R visit(NoOpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) " NOOP ";
		return _ret;
	}

	/**
	 * f0 -> "ERROR"
	 */
	// production 6
	public R visit(ErrorStmt n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) " ERROR ";
		return _ret;
	}

	/**
	 * f0 -> "CJUMP" f1 -> Exp() f2 -> Label()
	 */
	// production 7
	public R visit(CJumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R exp = n.f1.accept(this);
		R lab = n.f2.accept(this);

		_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp);
		_ret = (R) (_ret + " CJUMP TEMP " + tempNumber + " " + lab);
		tempNumber++;

		return _ret;
	}

	/**
	 * f0 -> "JUMP" f1 -> Label()
	 */
	// production 8
	public R visit(JumpStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R lab = n.f1.accept(this);
		_ret = (R) (" JUMP " + lab);
		return _ret;
	}

	/**
	 * f0 -> "HSTORE" f1 -> Exp() f2 -> IntegerLiteral() f3 -> Exp()
	 */
	// production 9
	public R visit(HStoreStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R exp1 = n.f1.accept(this);
		R intl = n.f2.accept(this);
		R exp2 = n.f3.accept(this);

		_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp1);
		_ret = (R) (_ret + " MOVE TEMP " + (tempNumber + 1) + " " + exp2);
		_ret = (R) (_ret + " HSTORE TEMP " + tempNumber + " " + intl + " TEMP " + (tempNumber + 1));
		tempNumber += 2;

		return _ret;
	}

	/**
	 * f0 -> "HLOAD" f1 -> Temp() f2 -> Exp() f3 -> IntegerLiteral()
	 */
	// production 10
	public R visit(HLoadStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R temp = n.f1.accept(this);
		R exp = n.f2.accept(this);
		R intl = n.f3.accept(this);

		_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp);
		_ret = (R) (_ret + " HLOAD " + temp + " TEMP " + tempNumber + " " + intl);
		tempNumber++;

		return _ret;
	}

	/**
	 * f0 -> "MOVE" f1 -> Temp() f2 -> Exp()
	 */
	// production 11
	public R visit(MoveStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R temp = n.f1.accept(this);
		R exp = n.f2.accept(this);

		_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp);
		_ret = (R) (" MOVE " + temp + " TEMP " + tempNumber);
		tempNumber++;
		return _ret;
	}

	/**
	 * f0 -> "PRINT" f1 -> Exp()
	 */
	// production 12
	public R visit(PrintStmt n) {
		R _ret = null;
		n.f0.accept(this);
		R exp = n.f1.accept(this);
		_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp);
		_ret = (R) (_ret + " PRINT " + " TEMP " + tempNumber);
		tempNumber++;
		return _ret;
	}

	/**
	 * f0 -> StmtExp() | Call() | HAllocate() | BinOp() | Temp() |
	 * IntegerLiteral() | Label()
	 */
	// production 13
	public R visit(Exp n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		switch(n.f0.which)
		{
		case 0:case 5: case 6: break;
		default:
			System.out.println(_ret);
		}
		return _ret;
	}

	/**
	 * f0 -> "BEGIN" f1 -> StmtList() f2 -> "RETURN" f3 -> Exp() f4 -> "END"
	 */
	// production 14
	public R visit(StmtExp n) {
		R _ret = null;
		n.f0.accept(this);
		R smt = n.f1.accept(this);
		n.f2.accept(this);
		R exp = n.f3.accept(this);
		n.f4.accept(this);
		if (!function) {
			_ret = (R) (" " + " MOVE TEMP " + tempNumber + " " + exp);
			_ret = (R) (_ret + " TEMP " + tempNumber);
			tempNumber++;
		} else {
			_ret = (R) (" MOVE TEMP " + tempNumber + " " + exp);
			_ret = (R) (" BEGIN " + smt + " RETURN TEMP " + tempNumber + " END ");
			tempNumber++;
		}
		return _ret;
	}

	/**
	 * f0 -> "CALL" f1 -> Exp() f2 -> "(" f3 -> ( Exp() )* f4 -> ")"
	 */
	// production 15
	public R visit(Call n) {
		R _ret = null;
		n.f0.accept(this);
		R exp = n.f1.accept(this);
		n.f2.accept(this);
		// n.f3.accept(this);
		int first = tempNumber;
		tempNumber++;
		_ret = (R) (" MOVE TEMP " + first + " " + exp);
		Vector<Node> nodes = n.f3.nodes;
		Vector<Integer> temps = new Vector<Integer>();

		for (Node N : nodes) {
			temps.add(tempNumber);
			_ret = (R) (_ret + " MOVE TEMP " + tempNumber + " " + N
					.accept(this));
			tempNumber++;

		}

		n.f4.accept(this);

		_ret = (R) (_ret + " CALL TEMP " + first + " ( ");
		for (Integer i : temps) {
			_ret = (R) (_ret + " TEMP " + i + " ");
		}
		_ret = (R) (_ret + " ) ");
		return _ret;
	}

	/**
	 * f0 -> "HALLOCATE" f1 -> Exp()
	 */
	// production 16
	public R visit(HAllocate n) {
		R _ret = null;
		n.f0.accept(this);
		R exp = n.f1.accept(this);

		String mov1 = " MOVE TEMP " + tempNumber + " " + exp;
		_ret = (R) (mov1 + " HALLOCATE " + " TEMP " + tempNumber);
		tempNumber += 1;
		return _ret;
	}

	/**
	 * f0 -> Operator() f1 -> Exp() f2 -> Exp()
	 */
	// production 17
	public R visit(BinOp n) {
		R _ret = null;

		R op = n.f0.accept(this);
		R exp1 = n.f1.accept(this);
		R exp2 = n.f2.accept(this);

		String mov1 = " MOVE TEMP " + tempNumber + " " + exp1;
		String mov2 = " MOVE TEMP " + (tempNumber + 1) + " " + exp2;

		_ret = (R) (mov1 + mov2 + " " + op + " TEMP " + tempNumber + " TEMP " + (tempNumber + 1));
		tempNumber += 2;
		// System.out.println(_ret);
		return _ret;
	}

	/**
	 * f0 -> "LT" | "PLUS" | "MINUS" | "TIMES"
	 */
	// production 18
	public R visit(Operator n) {
		R _ret = null;
		n.f0.accept(this);
		switch (n.f0.which) {
		case 0:
			_ret = (R) " LT ";
			break;
		case 1:
			_ret = (R) " PLUS ";
			break;
		case 2:
			_ret = (R) " MINUS ";
			break;
		case 3:
			_ret = (R) " TIMES ";
			break;
		}

		return _ret;
	}

	/**
	 * f0 -> "TEMP" f1 -> IntegerLiteral()
	 */
	// production 19
	public R visit(Temp n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) (" TEMP " + n.f1.accept(this));
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	// production 20
	public R visit(IntegerLiteral n) {
		n.f0.accept(this);
		return (R) n.f0.tokenImage;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	// production 21
	public R visit(Label n) {
		n.f0.accept(this);
		// System.out.println(n.f0.tokenImage);
		return (R) n.f0.tokenImage;
	}
}
