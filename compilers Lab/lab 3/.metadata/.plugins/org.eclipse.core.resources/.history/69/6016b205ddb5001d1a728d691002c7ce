//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

import MainPackage.FunctionClass;
import MainPackage.SymbolTable;
import MainPackage.VariableClass;
import MainPackage.Class;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJNoArguDepthFirst_Parse2<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//

	/* Set of helper variables and functions */
	public SymbolTable symt;
	public int k = -1;
	public Vector<ArrayList<String>> paraStack = new Vector<ArrayList<String>>();

	public GJNoArguDepthFirst_Parse2(SymbolTable sym) {
		this.symt = sym;
		SymbolTable.currentClass = null;
		SymbolTable.currentFunction = null;
	}

	public static void Exit() {
		System.out.println("No");
		System.exit(1);
	}

	public R IType(R var) {
		if (var == "int" || var == "int[]" || var == "boolean") {
			return var;

		} else {
			String hashString = symt.hashString("variable", (String) var,
					SymbolTable.currentClass, SymbolTable.currentFunction);

			VariableClass V;
			if (symt.mainTable.containsKey(hashString)) {
				V = (VariableClass) symt.query(hashString);
				return (R) V.type;
			}

			hashString = symt.hashString("variable", (String) var,
					SymbolTable.currentClass, null);

			if (symt.mainTable.containsKey(hashString)) {
				V = (VariableClass) symt.query(hashString);
				return (R) V.type;
			}

			hashString = symt.hashString("function", (String) var,
					SymbolTable.currentClass, SymbolTable.currentFunction);

			FunctionClass F;
			if (symt.mainTable.containsKey(hashString)) {
				F = (FunctionClass) symt.query(hashString);
				return (R) F.retType;
			}

			hashString = symt.hashString("class", (String) ClassName(var),
					(String) ClassName(var), null);

			Class C;
			if (symt.mainTable.containsKey(hashString)) {
				C = (Class) symt.query(hashString);
				return (R) C.name;
			}
		}

		return null;
	}

	public R ClassName(R var) {

		String hashString = symt.hashString("variable", (String) var,
				symt.currentClass, symt.currentFunction);
		VariableClass V;
		if (symt.mainTable.containsKey(hashString)) {
			V = (VariableClass) symt.query(hashString);
			return (R) V.type;
		}

		hashString = symt.hashString("variable", (String) var,
				symt.currentClass, null);

		if (symt.mainTable.containsKey(hashString)) {
			V = (VariableClass) symt.query(hashString);
			return (R) V.type;
		}
		return var;
	}

	public R visit(NodeList n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if (n.present()) {
			R _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public R visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
	 */
	public R visit(Goal n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
	 * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
	 * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
	 * "}" f16 -> "}"
	 */
	public R visit(MainClass n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		n.f14.accept(this);
		n.f15.accept(this);
		n.f16.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
	 */
	public R visit(TypeDeclaration n) {
		R _ret = null;
		if (n.f0.which == 0) {
			String name = ((ClassDeclaration) n.f0.choice).f1.f0.tokenImage;
			SymbolTable.currentClass = name;
		}
		if (n.f0.which == 1) {
			String name = ((ClassExtendsDeclaration) n.f0.choice).f1.f0.tokenImage;
			SymbolTable.currentClass = name;
		}
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4
	 * -> ( MethodDeclaration() )* f5 -> "}"
	 */
	public R visit(ClassDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
	 * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
	 */
	public R visit(ClassExtendsDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier() f2 -> ";"
	 */
	public R visit(VarDeclaration n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> (
	 * FormalParameterList() )? f5 -> ")" f6 -> "{" f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )* f9 -> "return" f10 -> Expression() f11 -> ";" f12
	 * -> "}"
	 */
	public R visit(MethodDeclaration n) {
		R _ret = null;
		String name = n.f2.f0.tokenImage;
		SymbolTable.currentFunction = name;

		n.f0.accept(this);
		R ret1 = n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		R ret2 = n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);

		R ret1Type = IType(ret1);
		R ret2Type = IType(ret2);

		if (ret1Type != ret2Type) {
			boolean checkFail = false;
			if (symt.Alias.containsKey(ret2Type)) {
				if (symt.Alias.get(ret2Type).contains(ret1Type))
					checkFail = true;
			}

			if (checkFail) {
				System.out.println("Return Type Mismatch");
				Exit();
			}
		}

		return _ret;
	}

	/**
	 * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
	 */
	public R visit(FormalParameterList n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type() f1 -> Identifier()
	 */
	public R visit(FormalParameter n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);

		return _ret;
	}

	/**
	 * f0 -> "," f1 -> FormalParameter()
	 */
	public R visit(FormalParameterRest n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
	 */
	public R visit(Type n) {
		R _ret = null;
		n.f0.accept(this);
		if (n.f0.which == 0)
			_ret = (R) "int[]";
		if (n.f0.which == 1)
			_ret = (R) "boolean";
		if (n.f0.which == 2)
			_ret = (R) "int";
		if (n.f0.which == 3)
			_ret = (R) ((Identifier) (n.f0.choice)).f0.tokenImage;
		return _ret;
	}

	/**
	 * f0 -> "int" f1 -> "[" f2 -> "]"
	 */
	public R visit(ArrayType n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public R visit(BooleanType n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public R visit(IntegerType n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
	 * IfStatement() | WhileStatement() | PrintStatement()
	 */
	public R visit(Statement n) {
		R _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
	 */
	public R visit(Block n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
	 */
	public R visit(AssignmentStatement n) {
		R _ret = null;
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		n.f3.accept(this);

		R ret1Type = IType(ret1);
		R ret2Type = IType(ret2);

		if (ret1Type != ret2Type) {

			boolean checkFail = false;
			if (symt.Alias.containsKey(ret2Type)) {
				if (symt.Alias.get(ret2Type).contains(ret1Type))
					checkFail = true;
			}

			if (checkFail) {
				System.out.println("LHS != RHS while assigning");
				Exit();
			}
		}
		return _ret;
	}

	/**
	 * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 ->
	 * Expression() f6 -> ";"
	 */
	public R visit(ArrayAssignmentStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
	 * "else" f6 -> Statement()
	 */
	public R visit(IfStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
	 */
	public R visit(WhileStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
	 * ";"
	 */
	public R visit(PrintStatement n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		_ret = n.f2.accept(this);
		if (IType(_ret) != "int") {
			System.out.println("Print statement doesnt have an int");
			Exit();
		}
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
	 * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
	 * MessageSend() | PrimaryExpression()
	 */
	public R visit(Expression n) {
		R _ret = null;
		_ret = n.f0.accept(this);

		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "&" f2 -> PrimaryExpression()
	 */

	public R visit(AndExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		if (!(IType(ret1) == IType(ret2) && (IType(ret1) == "boolean"))) {
			{
				System.out.println("& - Type mismatch");
				Exit();
			}
		}
		return IType(ret1);
	}

/**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
	public R visit(CompareExpression n) {

		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		if (!(IType(ret1) == IType(ret2) && IType(ret1) == "int")) {
			System.out.println("< - Type mismatch");
			Exit();
		}
		return (R) "boolean";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
	 */
	public R visit(PlusExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		if (!(IType(ret1) == IType(ret2) && IType(ret1) == "int")) {
			System.out.println("+ - Type mismatch");
			Exit();
		}
		return (R) "int";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
	 */
	public R visit(MinusExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		if (!(IType(ret1) == IType(ret2) && IType(ret1) == "int")) {
			System.out.println("- - Type mismatch");
			Exit();
		}
		return (R) "int";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
	 */
	public R visit(TimesExpression n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		if (!(IType(ret1) == IType(ret2) && IType(ret1) == "int")) {
			System.out.println("* - Type mismatch");
			Exit();
		}
		return (R) "int";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
	 */
	public R visit(ArrayLookup n) {
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		n.f3.accept(this);

		if (IType(ret1) != "int[]") {

			System.out.println("Array Lookup 1");
			Exit();

		}
		if (IType(ret2) != "int") {

			System.out.println("Array Lookup 2");
			Exit();

		}
		return (R) "int";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
	 */
	public R visit(ArrayLength n) {
		R _ret = null;
		_ret = n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);

		if (IType(_ret) != "int[]") {
			System.out.println("Array Length");
			Exit();
		}
		return (R) "int";
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> (
	 * ExpressionList() )? f5 -> ")"
	 */
	public R visit(MessageSend n) {
		R _ret = null;
		R ret1 = n.f0.accept(this);
		n.f1.accept(this);
		R ret2 = n.f2.accept(this);
		n.f3.accept(this);
		k++;
		n.f4.accept(this);
		n.f5.accept(this);

		String hashString = symt.hashString("function", (String) ret2,
				(String) ClassName(ret1), (String) ret2);

		if (symt.mainTable.containsKey(hashString)) {
			FunctionClass F = (FunctionClass) symt.query(hashString);
			int i;

			ArrayList<String> params = new ArrayList<String>();
			

				params = paraStack.elementAt(k);

				if (params.size() != F.formalParamList.size()) {

					System.out.println("Number of params doesnt match");

					Exit();
				}
				for (i = 0; i < params.size(); i++) {
					if (params.get(i) == null)
						Exit();
					if (!(params.get(i).equals(F.formalParamList.get(i).type))) {
						boolean checkFail = false;
						String ret1Type = F.formalParamList.get(i).type;
						String ret2Type = params.get(i);
						if (symt.Alias.containsKey(ret2Type)) {
							if (symt.Alias.get(ret2Type).contains(ret1Type))
								checkFail = true;
						}

						if (checkFail) {

							System.out
									.println("Actual Param doesnt match Formal Param");
							Exit();
						}
					}
				}
				params.clear();
				k--;
			}
			return (R) F.retType;
		
			System.out.println(hashString);
			System.out.println("Class function call");
			Exit();
		
		return _ret;
	}

	/**
	 * f0 -> Expression() f1 -> ( ExpressionRest() )*
	 */
	public R visit(ExpressionList n) {
		R _ret = null;
		R ret1 = n.f0.accept(this);

		ArrayList<String> params = new ArrayList<String>();
		params.add((String) IType(ret1));
		paraStack.add(k, params);

		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "," f1 -> Expression()
	 */
	public R visit(ExpressionRest n) {
		R _ret = null;
		n.f0.accept(this);
		R ret1 = n.f1.accept(this);
		paraStack.get(k).add((String) IType(ret1));

		return _ret;
	}

	/**
	 * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
	 * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
	 * NotExpression() | BracketExpression()
	 */
	public R visit(PrimaryExpression n) {
		R _ret = null;
		_ret = (R) n.f0.accept(this);

		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public R visit(IntegerLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) "int";
	}

	/**
	 * f0 -> "true"
	 */
	public R visit(TrueLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) "boolean";
	}

	/**
	 * f0 -> "false"
	 */
	public R visit(FalseLiteral n) {
		R _ret = null;
		n.f0.accept(this);
		return (R) "boolean";
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public R visit(Identifier n) {
		R _ret = null;
		n.f0.accept(this);

		return (R) n.f0.tokenImage;
	}

	/**
	 * f0 -> "this"
	 */
	public R visit(ThisExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) SymbolTable.currentClass;
		return _ret;
	}

	/**
	 * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
	 */
	public R visit(ArrayAllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		_ret = n.f3.accept(this);
		if (IType(_ret) != "int") {
			System.out.println("Integer inside a array bound");
			Exit();
		}
		n.f4.accept(this);
		return (R) "int[]";
	}

	/**
	 * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
	 */
	public R visit(AllocationExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = n.f1.accept(this);
		String hashString = symt.hashString("class", (String) _ret,
				(String) _ret, null);
		if (!symt.mainTable.containsKey(hashString)) {
			System.out.println("new Identifier()");
			Exit();
		}

		n.f2.accept(this);
		n.f3.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "!" f1 -> Expression()
	 */
	public R visit(NotExpression n) {

		n.f0.accept(this);
		R ret = n.f1.accept(this);
		if (IType(ret) != "boolean") {
			System.out.println("!Expression()");
			Exit();
		}

		return (R) "boolean";
	}

	/**
	 * f0 -> "(" f1 -> Expression() f2 -> ")"
	 */
	public R visit(BracketExpression n) {
		R _ret = null;
		n.f0.accept(this);
		_ret = (R) n.f1.accept(this);
		n.f2.accept(this);

		return _ret;
	}

}
